{"version":3,"file":"static/js/688.7e677088.chunk.js","mappings":"kNAkFA,UAzD4B,WAExB,IAAAA,GAA6BC,EAAAA,EAAAA,YAAWC,EAAAA,GAAkBC,EAAAA,IAAwBC,GAAAC,EAAAA,EAAAA,GAAAL,EAAA,GAA3EM,EAAQF,EAAA,GAAEG,EAAQH,EAAA,GACnBI,GAAOC,EAAAA,EAAAA,MAqCb,OAlCAC,EAAAA,EAAAA,YAAU,WAEN,OADAH,EAAS,CAACI,KAAMC,EAAAA,KACT,WACHL,EAAS,CAACI,KAAME,EAAAA,IACpB,CACJ,GAAG,KAGHH,EAAAA,EAAAA,YAAU,WACNF,EAAKM,SACJC,MAAK,SAACC,GAAI,OAAKA,EAAKC,MAAM,IAC1BF,MAAK,SAACC,GACH,GAAoB,OAAhBA,EAAKE,OAOL,KAAM,sBALNX,EAAS,CACLI,KAAMQ,EAAAA,EACNC,QAAS,CAACC,MAAOL,EAAKK,QAKlC,IACCC,OAAM,WAEHf,EAAS,CACLI,KAAMY,EAAAA,GACNH,QAAS,CAACI,aAAc,qCAEhC,IACCC,SAAQ,WACLlB,EAAS,CAACI,KAAMe,EAAAA,GAAmBN,QAAS,CAACO,WAAW,IAC5D,GACJ,GAAG,CAACnB,KAGAoB,EAAAA,EAAAA,MAACC,EAAAA,EAAS,CAACC,GAAI,CAACC,GAAI,GAAGC,SAAA,EAEnBJ,EAAAA,EAAAA,MAACK,EAAAA,EAAG,CAACC,QAAQ,OAAOC,WAAW,SAASC,eAAe,SAAQJ,SAAA,EAC3DK,EAAAA,EAAAA,KAACC,EAAAA,EAAQ,CAACC,SAAS,QAAQT,GAAI,CAACU,GAAI,MACpCH,EAAAA,EAAAA,KAACI,EAAAA,EAAU,CAACC,QAAQ,KAAIV,SAAC,kBAE7BK,EAAAA,EAAAA,KAACM,EAAAA,EAAO,CAACb,GAAI,CAACc,GAAI,EAAGC,GAAI,MAGzBR,EAAAA,EAAAA,KAACS,EAAAA,GAAAA,SAAyB,CAACC,MAAOzC,EAAS0B,UACvCK,EAAAA,EAAAA,KAACW,EAAAA,GAAM,QAIvB,C,uPCjEapC,EAAa,aACbO,EAAe,eACfO,EAAoB,oBACpBb,EAAe,eACfU,EAAQ,QACRuB,GAAmBG,EAAAA,EAAAA,eAAoC,CAAC,GAExD/C,EAAmB,SAACgD,EAA6BC,GAA+D,IAADC,EACxH,OAAQD,EAAOxC,MACX,KAAKQ,EAAe,IAADkC,EACf,MAAO,CACH1B,WAAW,EACXN,MAAqB,QAAhBgC,EAAEF,EAAO/B,eAAO,IAAAiC,OAAA,EAAdA,EAAgBhC,MACvBiC,OAAO,EACP9B,aAAc,IAGtB,KAAKE,EAAoB,IAAD6B,EACpB,OAAAC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACON,GAAK,IACRvB,UAAyB,QAAhB4B,EAAEJ,EAAO/B,eAAO,IAAAmC,OAAA,EAAdA,EAAgB5B,YAGnC,KAAKf,EACL,KAAKC,EACD,MAAO,CACHc,WAAW,EACXN,MAAO,GACPiC,OAAO,EACP9B,aAAc,IAGtB,KAAKD,EACD,OAAAiC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACON,GAAK,IACRI,OAAO,EACP9B,cAA4B,QAAd4B,EAAAD,EAAO/B,eAAO,IAAAgC,OAAA,EAAdA,EAAgB5B,eAAgB,qCAEtD,QACI,OAAAgC,EAAAA,EAAAA,GAAA,GAAWN,GAGvB,EAEa/C,EAAgD,CACzDwB,WAAW,EACXN,MAAO,GACPiC,OAAO,EACP9B,aAAc,G","sources":["pages/portfolio/index.tsx","pages/portfolio/reducer.ts"],"sourcesContent":["import React, {useEffect, useReducer} from 'react';\nimport {Outlet, useLoaderData} from 'react-router-dom';\n// @mui components\nimport Box from '@mui/material/Box';\nimport Container from '@mui/material/Container';\nimport Typography from '@mui/material/Typography';\nimport Divider from '@mui/material/Divider';\n// @mui icons\nimport WorkIcon from '@mui/icons-material/Work';\n// @types\nimport {PortfolioAPIResponse} from './types';\n// Portfolio Context\nimport { \n    PortfolioContext,\n    PortfolioReducer,\n    PORTFOLIO_INITIAL_STATE,\n    // Action types\n    UPDATE_ITEMS,\n    UPDATE_IS_LOADING,\n    DELETE_ITEMS,\n    ERROR,\n    INITIALIZE\n} from './reducer';\n\n/* The portfolio page */\nconst Portfolio: React.FC = () => {\n\n    const [pContext, dispatch] = useReducer(PortfolioReducer, PORTFOLIO_INITIAL_STATE);\n    const data = useLoaderData() as {response: Promise<Response>};\n\n    // Initialize when the component is mounted and delete when the component is unmounted\n    useEffect(() => {\n        dispatch({type: INITIALIZE});\n        return () => {\n            dispatch({type: DELETE_ITEMS});\n        }\n    }, [])\n\n    // Fetch data from API endpoint\n    useEffect(() => {\n        data.response\n        .then((resp) => resp.json())\n        .then((resp: PortfolioAPIResponse) => {\n            if (resp.status === \"OK\") {\n                // Received all items successfully\n                dispatch({\n                    type: UPDATE_ITEMS,\n                    payload: {items: resp.items}\n                })\n            } else {\n                throw \"Unexpected response\";\n            }\n        })\n        .catch(() => {\n            // An error occured\n            dispatch({\n                type: ERROR,\n                payload: {errorMessage: \"Sorry, an unknown error occured.\"}\n            })\n        })\n        .finally(() => {\n            dispatch({type: UPDATE_IS_LOADING, payload: {isLoading: false}});\n        })\n    }, [data]);\n    \n    return (\n        <Container sx={{py: 2}}>\n            {/* Header */}\n            <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\n                <WorkIcon fontSize=\"large\" sx={{mr: 1}}/>\n                <Typography variant=\"h4\">Portfolio</Typography>\n            </Box>\n            <Divider sx={{mt: 1, mb: 2}}/>\n\n            {/* Portfolio cards */}\n            <PortfolioContext.Provider value={pContext}>\n                <Outlet/>\n            </PortfolioContext.Provider>\n        </Container>\n    );\n};\n\nexport default Portfolio;","import {createContext} from 'react';\nimport {PortfolioItems} from './types';\n\nexport interface PortfolioContextType {\n    isLoading: boolean;\n    items: PortfolioItems[];\n    error: boolean;\n    errorMessage: string;\n}\n\nexport interface PortfolioReducerActionType {\n    type: string;\n    payload?: Partial<PortfolioContextType>;\n}\n\nexport const INITIALIZE = \"INITIALIZE\";\nexport const UPDATE_ITEMS = \"UPDATE_ITEMS\";\nexport const UPDATE_IS_LOADING = \"UPDATE_IS_LOADING\";\nexport const DELETE_ITEMS = \"DELETE_ITEMS\";\nexport const ERROR = \"ERROR\";\nexport const PortfolioContext = createContext<PortfolioContextType>({} as PortfolioContextType);\n\nexport const PortfolioReducer = (tasks: PortfolioContextType, action: PortfolioReducerActionType): PortfolioContextType  => {\n    switch (action.type) {\n        case UPDATE_ITEMS: {\n            return {\n                isLoading: false,\n                items: action.payload?.items as PortfolioItems[],\n                error: false,\n                errorMessage: \"\"\n            };\n        };\n        case UPDATE_IS_LOADING: {\n            return {\n                ...tasks,\n                isLoading: action.payload?.isLoading as boolean\n            };\n        };\n        case INITIALIZE:\n        case DELETE_ITEMS: {\n            return {\n                isLoading: true,\n                items: [],\n                error: false,\n                errorMessage: \"\"\n            }\n        };\n        case ERROR:\n            return {\n                ...tasks,\n                error: true,\n                errorMessage: action.payload?.errorMessage || \"Sorry, an unknown error occured!\"\n            }\n        default: {\n            return {...tasks}\n        };\n    }\n};\n\nexport const PORTFOLIO_INITIAL_STATE: PortfolioContextType = {\n    isLoading: true,\n    items: [],\n    error: false,\n    errorMessage: \"\"\n};\n\n"],"names":["_useReducer","useReducer","PortfolioReducer","PORTFOLIO_INITIAL_STATE","_useReducer2","_slicedToArray","pContext","dispatch","data","useLoaderData","useEffect","type","INITIALIZE","DELETE_ITEMS","response","then","resp","json","status","UPDATE_ITEMS","payload","items","catch","ERROR","errorMessage","finally","UPDATE_IS_LOADING","isLoading","_jsxs","Container","sx","py","children","Box","display","alignItems","justifyContent","_jsx","WorkIcon","fontSize","mr","Typography","variant","Divider","mt","mb","PortfolioContext","value","Outlet","createContext","tasks","action","_action$payload3","_action$payload","error","_action$payload2","_objectSpread"],"sourceRoot":""}