{"version":3,"file":"static/js/784.97ab8837.chunk.js","mappings":"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","sources":["pages/contact/ContactForm.tsx","pages/contact/ENDPOINT.ts","pages/contact/index.tsx"],"sourcesContent":["import React, {useState, useEffect} from 'react';\n// @mui components\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport Typography from '@mui/material/Typography';\nimport Button from '@mui/material/Button';\nimport Snackbar from '@mui/material/Snackbar';\nimport Alert from '@mui/material/Alert';\nimport IconButton from '@mui/material/IconButton';\n// @mui icons\nimport Icon from '@mui/material/Icon';\nimport SendIcon from '@mui/icons-material/Send';\nimport CloseIcon from '@mui/icons-material/Close';\n// Endpoints\nimport {BASE, SEND_MESSAGE} from './ENDPOINT';\n\nconst TITLE_LENGTH = 255;\nconst MESSAGE_LENGTH = 50;\n\ninterface SnackDataInterface {\n    open: boolean;\n    severity: \"error\" | \"success\";\n    message: string;\n}\n\nconst ContactForm: React.FC = () => {\n\n    const [title, setTitle] = useState<string>(\"\");\n    const [message, setMessage] = useState<string>(\"\");\n    const [valid, setValid] = useState<boolean>(false);\n    // State of the snackbar\n    const [SnackData, setSnackData] = useState<SnackDataInterface>({\n        open: false, severity: \"success\", message: \"NULL\"\n    });\n\n    // Function to close the snackbar\n    const closeSnackbar = () => {\n        setSnackData((prev) => ({\n            ...prev,\n            open: false\n        }));\n    };\n\n    // Function to show error on snackbar\n    const snackError = () => {\n        setSnackData((prev) => ({\n            ...prev,\n            open: true,\n            severity: \"error\",\n            message: \"An error occured.\"\n        }));\n    };\n\n    // Function to update the title\n    const UpdateTitle = (e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n        setTitle(e.currentTarget.value.substring(0, TITLE_LENGTH))\n    };\n\n    // Update the message\n    const UpdateMessage = (e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n        setMessage(e.currentTarget.value.substring(0, MESSAGE_LENGTH))\n    };\n\n    useEffect(() => {\n        if (title.length === 0 || title.length > TITLE_LENGTH) {\n            setValid(false);\n        } else if (message.length === 0 || message.length > MESSAGE_LENGTH) {\n            setValid(false);\n        } else {\n            setValid(true);\n        }\n    }, [title, message]);\n\n    // Send message\n    const sendMessageToServer = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        e.preventDefault();\n        \n        fetch(`${BASE}${SEND_MESSAGE}`, {\n            mode: \"cors\",\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                title: title,\n                message: message\n            })\n        })\n        .then((resp) => resp.json())\n        .then((resp) => {\n            if (resp.status === \"OK\") {\n                // Message was sent successfully\n                setSnackData({\n                    open: true,\n                    severity: \"success\",\n                    message: \"Message was successfully sent!\"\n                });\n                // Clear inputs\n                setTitle(\"\");\n                setMessage(\"\");\n            } else {\n                // else an error occurred\n                snackError();\n            }\n        })\n        .catch((e) => {\n            // An error occured\n            snackError();\n        })\n    };\n\n    return (\n        <>\n        <Box p={2}>\n            <Typography variant=\"body2\"><b>Send a message as anon</b></Typography>\n            \n            {/* Title */}\n            <Box display=\"flex\" mt={1} alignItems=\"center\">\n                <TextField \n                    value={title}\n                    onChange={UpdateTitle}\n                    label=\"Title\"\n                    size=\"small\"\n                    variant=\"outlined\"\n                    fullWidth\n                    InputProps={{\n                        startAdornment: <Icon className=\"fas fa-user-secret\" sx={{mr: 1}} />\n                    }}\n                    helperText={title.length === TITLE_LENGTH ? \"Maximum length reached\" : \"\"}\n                />\n            </Box>\n\n            {/* Message */}\n            <Box mt={1}>\n                <TextField \n                    value={message}\n                    onChange={UpdateMessage}\n                    label=\"Message\"\n                    size=\"small\"\n                    variant=\"outlined\"\n                    fullWidth\n                    rows={3} multiline\n                    helperText={message.length === MESSAGE_LENGTH ? \"Maxmium length reached\" : \"\"}\n                />\n            </Box>\n            <Button \n                sx={{mt: 1}}\n                variant=\"contained\"\n                color=\"warning\"\n                startIcon={<SendIcon/>}\n                disabled={!valid}\n                onClick={sendMessageToServer}\n            >Send</Button>\n        </Box>\n        \n        {/* Snackbar to show status of the response */}\n        <Snackbar \n            open={SnackData.open}\n            autoHideDuration={6000}\n            onClose={closeSnackbar}\n        >\n            <Alert \n                severity={SnackData.severity} \n                variant=\"filled\" \n                action={<Button color=\"inherit\" onClick={closeSnackbar} >close</Button>}\n            >{SnackData.message}</Alert>\n        </Snackbar>\n        </>\n    )\n};\n\nexport default ContactForm;","import {BASE} from \"../../config\";\n\nconst SEND_MESSAGE = \"message/api/random_message/\";\n\nexport {BASE, SEND_MESSAGE};","import React, {useState} from 'react';\n// @mui components\nimport Box from '@mui/material/Box';\nimport Divider from '@mui/material/Divider';\nimport Container from '@mui/material/Container';\nimport Grid from '@mui/material/Grid';\nimport Typography from '@mui/material/Typography';\nimport Link from '@mui/material/Link';\nimport Button from '@mui/material/Button';\nimport Snackbar from '@mui/material/Snackbar';\nimport IconButton from '@mui/material/IconButton';\n// @mui icons\nimport MailOutlineIcon from '@mui/icons-material/MailOutline';\nimport CloseIcon from '@mui/icons-material/Close';\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\n// App theme\nimport {APP_THEME} from '../../appTheme';\n// Contact form\nimport ContactForm from './ContactForm';\n// Other components\nimport AppCard from '../home/components/AppCard';\nimport ProgrammerVibin from './media/programmer_vibin.gif';\n\nconst EMAIL = \"mdarafatzaman1@gmail.com\";\n\n/* The Contact page */\nconst Contact: React.FC = () => {\n    \n    interface SnackDataType {\n        open: boolean;\n        message: string;\n    }\n    \n    // State manager for snackbar\n    const [snackData, setSnackData] = useState<SnackDataType>({} as SnackDataType);\n    \n    // Close the snackbar\n    const closeSnackbar = () => {\n        setSnackData((prev) => ({...prev, open: false}) );\n    };\n    \n    // Open the snackbar\n    const openSnackbar: (message: string) => () => void = (message: string) => () => {\n        setSnackData(() => ({open: true, message: message}))\n    };\n\n    // Function to copy email to clipboard\n    const copyAddress = () => {\n        navigator.clipboard.writeText(EMAIL);\n        openSnackbar(\"Copied email to clipboard.\")();\n    };\n\n\n    return (\n        <Container sx={{p: 2}}>\n            <AppCard>\n                <Box \n                    py={2} px={4}\n                    display=\"flex\" alignItems=\"center\" \n                    sx={{backgroundColor: APP_THEME.palette.primary.light}}\n                >\n                    <Grid container spacing={2}>\n                        {/* Gif */}\n                        <Grid item xs={12} md=\"auto\">\n                            <img src={ProgrammerVibin} style={{objectFit: \"contain\", maxWidth: \"400px\"}} />\n                        </Grid>\n\n                        {/* Contact info */}\n                        <Grid item xs={12} md sx={{backgroundColor:\"rgba(255,255,255,0)\"}}>\n                            <AppCard sx={{height: \"100%\", width: \"100%\", backgroundColor:\"rgba(255,255,255,0)\"}}>\n                                <Box\n                                    sx={{\n                                        p: 2,\n                                        backgroundColor: \"rgba(255,255,255,0.75)\",\n                                        transition: \"all 200ms ease-in-out\",\n                                        \"&:hover\": {\n                                            backgroundColor: \"rgba(255,255,255,0.95)\"\n                                        },\n                                        height: \"100%\"\n                                    }}\n                                >   \n                                    {/* Header */}\n                                    <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\n                                        <MailOutlineIcon fontSize='large'/>\n                                        <Typography variant=\"h4\" sx={{ml: 1}}><u>Contact</u></Typography>\n                                    </Box>\n                                    <Divider sx={{my: 1}} />\n                                    {/* Email */}\n                                    <Box p={2}>\n                                        <Typography variant=\"h5\"><u>Email</u></Typography>\n                                        <Typography>\n                                            For business inquiries, email me at <Link href={`mailTo:${EMAIL}`}>{EMAIL}</Link>.\n                                        </Typography>\n                                        <Box pt={1}>\n                                            <Button startIcon={<ContentCopyIcon/>} variant=\"contained\" onClick={copyAddress}>Copy Address</Button>\n                                        </Box>\n                                    </Box>\n\n                                    {/* or  */}\n                                    <Box display=\"flex\" flexDirection=\"row\" alignItems=\"center\" px={2} py={0}>\n                                        <Box flexGrow={.5}><Divider/></Box>\n                                        <Typography sx={{mx: 1}} variant=\"caption\" color=\"GrayText\">or</Typography>\n                                        <Box flexGrow={.5}><Divider/></Box>\n                                    </Box>\n\n                                    {/* Contact form */}\n                                    <ContactForm/>\n                                </Box>\n                            </AppCard>\n                        </Grid>\n                    </Grid>\n                </Box>\n            </AppCard>\n\n            {/* Snackbar to alert */}\n            <Snackbar\n                anchorOrigin={{\n                    vertical: \"bottom\",\n                    horizontal: \"left\"\n                }}\n                open={snackData.open}\n                autoHideDuration={6000}\n                onClose={closeSnackbar}\n                message={snackData.message}\n                action={\n                    <IconButton onClick={closeSnackbar}>\n                        <CloseIcon htmlColor=\"#fff\"/>\n                    </IconButton>\n                }\n            />\n            \n        </Container>\n    );\n};\n\nexport default Contact;"],"names":["_useState","useState","_useState2","_slicedToArray","title","setTitle","_useState3","_useState4","message","setMessage","_useState5","_useState6","valid","setValid","_useState7","open","severity","_useState8","SnackData","setSnackData","closeSnackbar","prev","_objectSpread","snackError","useEffect","length","_jsxs","_Fragment","children","Box","p","_jsx","Typography","variant","display","mt","alignItems","TextField","value","onChange","e","currentTarget","substring","label","size","fullWidth","InputProps","startAdornment","Icon","className","sx","mr","helperText","rows","multiline","Button","color","startIcon","SendIcon","disabled","onClick","preventDefault","fetch","concat","BASE","mode","method","headers","body","JSON","stringify","then","resp","json","status","catch","Snackbar","autoHideDuration","onClose","Alert","action","EMAIL","snackData","Container","AppCard","py","px","backgroundColor","APP_THEME","Grid","container","spacing","item","xs","md","src","ProgrammerVibin","style","objectFit","maxWidth","height","width","transition","justifyContent","MailOutlineIcon","fontSize","ml","Divider","my","Link","href","pt","ContentCopyIcon","navigator","clipboard","writeText","flexDirection","flexGrow","mx","ContactForm","anchorOrigin","vertical","horizontal","IconButton","CloseIcon","htmlColor"],"sourceRoot":""}