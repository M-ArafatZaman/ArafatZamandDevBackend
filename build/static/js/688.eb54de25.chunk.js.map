{"version":3,"file":"static/js/688.eb54de25.chunk.js","mappings":"qIAAA,IAAMA,EAA2E,yC,gFCEjF,IAAMC,EAAsB,qCACtBC,EAAuB,oC,wJCoG7B,UA5E4B,WAExB,OAA6BC,EAAAA,EAAAA,YAAWC,EAAAA,GAAkBC,EAAAA,IAAwB,eAA3EC,EAAQ,KAAEC,EAAQ,KAyDzB,OAtDAC,EAAAA,EAAAA,YAAU,WAEN,IAAMC,EAAa,IAAIC,gBACjBC,EAASF,EAAWE,OAwC1B,OArCAJ,EAAS,CAACK,KAAMC,EAAAA,KAGhBC,MAAM,GAAD,OAAId,EAAAA,GAAI,OAAGC,EAAAA,IAAuB,CACnCc,OAAQ,MACRC,KAAM,OACNL,OAAQA,IAEXM,MAAK,SAACC,GAAQ,OAAKA,EAASC,MAAM,IAClCF,MAAK,SAACC,GACqB,OAApBA,EAASE,OAETb,EAAS,CACLK,KAAMS,EAAAA,EACNC,QAAS,CACLC,MAAOL,EAASK,SAKxBhB,EAAS,CAACK,KAAMY,EAAAA,GAAOF,QAAS,CAACG,aAAc,6CAEvD,IACCC,OAAM,WAEHnB,EAAS,CAACK,KAAMY,EAAAA,GAAOF,QAAS,CAACG,aAAc,4CACnD,IACCE,SAAQ,WACLpB,EAAS,CACLK,KAAMgB,EAAAA,GACNN,QAAS,CACLO,WAAW,IAGvB,IAGO,WACHtB,EAAS,CACLK,KAAMkB,EAAAA,GACNR,QAAS,CAAC,IAGdb,EAAWsB,OACf,CAEJ,GAAG,KAGC,UAAC,IAAS,CAACC,GAAI,CAACC,GAAI,GAAG,WAEnB,UAAC,IAAG,CAACC,QAAQ,OAAOC,WAAW,SAASC,eAAe,SAAQ,WAC3D,SAAC,IAAQ,CAACC,SAAS,QAAQL,GAAI,CAACM,GAAI,MACpC,SAAC,IAAU,CAACC,QAAQ,KAAI,SAAC,kBAE7B,SAAC,IAAO,CAACP,GAAI,CAACQ,GAAI,EAAGC,GAAI,MAGzB,SAAC,cAAyB,CAACC,MAAOpC,EAAS,UACvC,SAAC,KAAM,QAIvB,C,uPCtFaO,EAAa,aACbQ,EAAe,eACfO,EAAoB,oBACpBE,EAAe,eACfN,EAAQ,QACRmB,GAAmBC,EAAAA,EAAAA,eAAoC,CAAC,GAExDxC,EAAmB,SAACyC,EAA6BC,GAA+D,IAAD,EACxH,OAAQA,EAAOlC,MACX,KAAKS,EAAe,IAAD,EACf,MAAO,CACHQ,WAAW,EACXN,MAAqB,QAAhB,EAAEuB,EAAOxB,eAAO,aAAd,EAAgBC,MACvBwB,OAAO,EACPtB,aAAc,IAGtB,KAAKG,EAAoB,IAAD,EACpB,OAAO,kBACAiB,GAAK,IACRhB,UAAyB,QAAhB,EAAEiB,EAAOxB,eAAO,aAAd,EAAgBO,YAGnC,KAAKC,EACD,MAAO,CACHD,WAAW,EACXN,MAAO,GACPwB,OAAO,EACPtB,aAAc,IAGtB,KAAKD,EACD,OAAO,kBACAqB,GAAK,IACRE,OAAO,EACPtB,cAA4B,QAAd,EAAAqB,EAAOxB,eAAO,aAAd,EAAgBG,eAAgB,qCAEtD,QACI,OAAO,UAAIoB,GAGvB,EAEaxC,EAAgD,CACzDwB,WAAW,EACXN,MAAO,GACPwB,OAAO,EACPtB,aAAc,G","sources":["config.ts","pages/portfolio/ENDPOINT.ts","pages/portfolio/index.tsx","pages/portfolio/reducer.ts"],"sourcesContent":["const BASE = process.env.NODE_ENV === \"development\" ? \"http://localhost:8000/\" : \"https://arafatzaman.pythonanywhere.com/\"\r\n\r\nexport {BASE};","import {BASE} from '../../config';\r\n\r\nconst GET_PORTFOLIO_ITEMS = \"/projects/api/get_portfolio_items/\";\r\nconst VIEW_PORTFOLIO_ITEMS = \"/projects/api/view_portfolio_item/\";\r\n\r\nexport {BASE, GET_PORTFOLIO_ITEMS, VIEW_PORTFOLIO_ITEMS};","import React, {useEffect, useReducer} from 'react';\r\nimport {Outlet} from 'react-router-dom';\r\n// @mui components\r\nimport Box from '@mui/material/Box';\r\nimport Container from '@mui/material/Container';\r\nimport Typography from '@mui/material/Typography';\r\nimport Divider from '@mui/material/Divider';\r\n// @mui icons\r\nimport WorkIcon from '@mui/icons-material/Work';\r\n// @types\r\nimport {PortfolioAPIResponse} from './types';\r\n// Endpoints\r\nimport {BASE, GET_PORTFOLIO_ITEMS} from './ENDPOINT';\r\n// Portfolio Context\r\nimport { \r\n    PortfolioContext,\r\n    PortfolioReducer,\r\n    PORTFOLIO_INITIAL_STATE,\r\n    // Action types\r\n    UPDATE_ITEMS,\r\n    UPDATE_IS_LOADING,\r\n    DELETE_ITEMS,\r\n    ERROR,\r\n    INITIALIZE\r\n} from './reducer';\r\n\r\n/* The portfolio page */\r\nconst Portfolio: React.FC = () => {\r\n\r\n    const [pContext, dispatch] = useReducer(PortfolioReducer, PORTFOLIO_INITIAL_STATE);\r\n\r\n    // Fetch data from API endpoint\r\n    useEffect(() => {\r\n\r\n        const controller = new AbortController();\r\n        const signal = controller.signal;\r\n\r\n        // Initialize loading\r\n        dispatch({type: INITIALIZE});\r\n\r\n        // Fetch\r\n        fetch(`${BASE}${GET_PORTFOLIO_ITEMS}`, {\r\n            method: \"GET\",\r\n            mode: \"cors\",\r\n            signal: signal\r\n        })\r\n        .then((response) => response.json())\r\n        .then((response: PortfolioAPIResponse) => {\r\n            if (response.status === \"OK\") {\r\n                //setItems(response.items);\r\n                dispatch({\r\n                    type: UPDATE_ITEMS,\r\n                    payload: {\r\n                        items: response.items\r\n                    }\r\n                })\r\n            } else {\r\n                // An error occured\r\n                dispatch({type: ERROR, payload: {errorMessage: \"Sorry, an uncaught server error occured!\"}});\r\n            }\r\n        })\r\n        .catch(() => {\r\n            // Handle the error\r\n            dispatch({type: ERROR, payload: {errorMessage: \"Sorry, unable to connect to the server.\"}})\r\n        })\r\n        .finally(() => {\r\n            dispatch({\r\n                type: UPDATE_IS_LOADING,\r\n                payload: {\r\n                    isLoading: false\r\n                }\r\n            })\r\n        })\r\n\r\n        // Destructor to delete all the items in context\r\n        return () => {\r\n            dispatch({\r\n                type: DELETE_ITEMS,\r\n                payload: {}\r\n            })\r\n            // Abort fetch when the component is unmounted\r\n            controller.abort();\r\n        }\r\n\r\n    }, []);\r\n    \r\n    return (\r\n        <Container sx={{py: 2}}>\r\n            {/* Header */}\r\n            <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\r\n                <WorkIcon fontSize=\"large\" sx={{mr: 1}}/>\r\n                <Typography variant=\"h4\">Portfolio</Typography>\r\n            </Box>\r\n            <Divider sx={{mt: 1, mb: 2}}/>\r\n\r\n            {/* Portfolio cards */}\r\n            <PortfolioContext.Provider value={pContext}>\r\n                <Outlet/>\r\n            </PortfolioContext.Provider>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Portfolio;","import {createContext} from 'react';\r\nimport {PortfolioItems} from './types';\r\n\r\nexport interface PortfolioContextType {\r\n    isLoading: boolean;\r\n    items: PortfolioItems[];\r\n    error: boolean;\r\n    errorMessage: string;\r\n}\r\n\r\nexport interface PortfolioReducerActionType {\r\n    type: string;\r\n    payload?: Partial<PortfolioContextType>;\r\n}\r\n\r\nexport const INITIALIZE = \"INITIALIZE\";\r\nexport const UPDATE_ITEMS = \"UPDATE_ITEMS\";\r\nexport const UPDATE_IS_LOADING = \"UPDATE_IS_LOADING\";\r\nexport const DELETE_ITEMS = \"DELETE_ITEMS\";\r\nexport const ERROR = \"ERROR\";\r\nexport const PortfolioContext = createContext<PortfolioContextType>({} as PortfolioContextType);\r\n\r\nexport const PortfolioReducer = (tasks: PortfolioContextType, action: PortfolioReducerActionType): PortfolioContextType  => {\r\n    switch (action.type) {\r\n        case UPDATE_ITEMS: {\r\n            return {\r\n                isLoading: false,\r\n                items: action.payload?.items as PortfolioItems[],\r\n                error: false,\r\n                errorMessage: \"\"\r\n            };\r\n        };\r\n        case UPDATE_IS_LOADING: {\r\n            return {\r\n                ...tasks,\r\n                isLoading: action.payload?.isLoading as boolean\r\n            };\r\n        };\r\n        case DELETE_ITEMS: {\r\n            return {\r\n                isLoading: true,\r\n                items: [],\r\n                error: false,\r\n                errorMessage: \"\"\r\n            }\r\n        };\r\n        case ERROR:\r\n            return {\r\n                ...tasks,\r\n                error: true,\r\n                errorMessage: action.payload?.errorMessage || \"Sorry, an unknown error occured!\"\r\n            }\r\n        default: {\r\n            return {...tasks}\r\n        };\r\n    }\r\n};\r\n\r\nexport const PORTFOLIO_INITIAL_STATE: PortfolioContextType = {\r\n    isLoading: true,\r\n    items: [],\r\n    error: false,\r\n    errorMessage: \"\"\r\n};\r\n\r\n"],"names":["BASE","GET_PORTFOLIO_ITEMS","VIEW_PORTFOLIO_ITEMS","useReducer","PortfolioReducer","PORTFOLIO_INITIAL_STATE","pContext","dispatch","useEffect","controller","AbortController","signal","type","INITIALIZE","fetch","method","mode","then","response","json","status","UPDATE_ITEMS","payload","items","ERROR","errorMessage","catch","finally","UPDATE_IS_LOADING","isLoading","DELETE_ITEMS","abort","sx","py","display","alignItems","justifyContent","fontSize","mr","variant","mt","mb","value","PortfolioContext","createContext","tasks","action","error"],"sourceRoot":""}