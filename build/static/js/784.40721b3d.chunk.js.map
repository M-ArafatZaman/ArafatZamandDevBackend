{"version":3,"file":"static/js/784.40721b3d.chunk.js","mappings":"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","sources":["pages/contact/ContactForm.tsx","pages/contact/ENDPOINT.ts","pages/contact/index.tsx","pages/home/components/AppCard.tsx"],"sourcesContent":["import React, {useState, useEffect} from 'react';\r\n// @mui components\r\nimport Box from '@mui/material/Box';\r\nimport TextField from '@mui/material/TextField';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport Alert from '@mui/material/Alert';\r\nimport IconButton from '@mui/material/IconButton';\r\n// @mui icons\r\nimport Icon from '@mui/material/Icon';\r\nimport SendIcon from '@mui/icons-material/Send';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\n// Endpoints\r\nimport {BASE, SEND_MESSAGE} from './ENDPOINT';\r\n\r\nconst TITLE_LENGTH = 255;\r\nconst MESSAGE_LENGTH = 50;\r\n\r\ninterface SnackDataInterface {\r\n    open: boolean;\r\n    severity: \"error\" | \"success\";\r\n    message: string;\r\n}\r\n\r\nconst ContactForm: React.FC = () => {\r\n\r\n    const [title, setTitle] = useState<string>(\"\");\r\n    const [message, setMessage] = useState<string>(\"\");\r\n    const [valid, setValid] = useState<boolean>(false);\r\n    // State of the snackbar\r\n    const [SnackData, setSnackData] = useState<SnackDataInterface>({\r\n        open: false, severity: \"success\", message: \"NULL\"\r\n    });\r\n\r\n    // Function to close the snackbar\r\n    const closeSnackbar = () => {\r\n        setSnackData((prev) => ({\r\n            ...prev,\r\n            open: false\r\n        }));\r\n    };\r\n\r\n    // Function to show error on snackbar\r\n    const snackError = () => {\r\n        setSnackData((prev) => ({\r\n            ...prev,\r\n            open: true,\r\n            severity: \"error\",\r\n            message: \"An error occured.\"\r\n        }));\r\n    };\r\n\r\n    // Function to update the title\r\n    const UpdateTitle = (e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value.substring(0, TITLE_LENGTH))\r\n    };\r\n\r\n    // Update the message\r\n    const UpdateMessage = (e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\r\n        setMessage(e.currentTarget.value.substring(0, MESSAGE_LENGTH))\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (title.length === 0 || title.length > TITLE_LENGTH) {\r\n            setValid(false);\r\n        } else if (message.length === 0 || message.length > MESSAGE_LENGTH) {\r\n            setValid(false);\r\n        } else {\r\n            setValid(true);\r\n        }\r\n    }, [title, message]);\r\n\r\n    // Send message\r\n    const sendMessageToServer = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        e.preventDefault();\r\n        \r\n        fetch(`${BASE}${SEND_MESSAGE}`, {\r\n            mode: \"cors\",\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify({\r\n                title: title,\r\n                message: message\r\n            })\r\n        })\r\n        .then((resp) => resp.json())\r\n        .then((resp) => {\r\n            if (resp.status === \"OK\") {\r\n                // Message was sent successfully\r\n                setSnackData({\r\n                    open: true,\r\n                    severity: \"success\",\r\n                    message: \"Message was successfully sent!\"\r\n                });\r\n                // Clear inputs\r\n                setTitle(\"\");\r\n                setMessage(\"\");\r\n            } else {\r\n                // else an error occurred\r\n                snackError();\r\n            }\r\n        })\r\n        .catch((e) => {\r\n            // An error occured\r\n            snackError();\r\n        })\r\n    };\r\n\r\n    return (\r\n        <>\r\n        <Box p={2}>\r\n            <Typography variant=\"body2\"><b>Send a message as anon</b></Typography>\r\n            \r\n            {/* Title */}\r\n            <Box display=\"flex\" mt={1} alignItems=\"center\">\r\n                <TextField \r\n                    value={title}\r\n                    onChange={UpdateTitle}\r\n                    label=\"Title\"\r\n                    size=\"small\"\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                    InputProps={{\r\n                        startAdornment: <Icon className=\"fas fa-user-secret\" sx={{mr: 1}} />\r\n                    }}\r\n                    helperText={title.length === TITLE_LENGTH ? \"Maximum length reached\" : \"\"}\r\n                />\r\n            </Box>\r\n\r\n            {/* Message */}\r\n            <Box mt={1}>\r\n                <TextField \r\n                    value={message}\r\n                    onChange={UpdateMessage}\r\n                    label=\"Message\"\r\n                    size=\"small\"\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                    rows={3} multiline\r\n                    helperText={message.length === MESSAGE_LENGTH ? \"Maxmium length reached\" : \"\"}\r\n                />\r\n            </Box>\r\n            <Button \r\n                sx={{mt: 1}}\r\n                variant=\"contained\"\r\n                color=\"warning\"\r\n                startIcon={<SendIcon/>}\r\n                disabled={!valid}\r\n                onClick={sendMessageToServer}\r\n            >Send</Button>\r\n        </Box>\r\n        \r\n        {/* Snackbar to show status of the response */}\r\n        <Snackbar \r\n            open={SnackData.open}\r\n            autoHideDuration={6000}\r\n            onClose={closeSnackbar}\r\n        >\r\n            <Alert \r\n                severity={SnackData.severity} \r\n                variant=\"filled\" \r\n                action={<Button color=\"inherit\" onClick={closeSnackbar} >close</Button>}\r\n            >{SnackData.message}</Alert>\r\n        </Snackbar>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default ContactForm;","const BASE = \"http://localhost:8000/\";\r\nconst SEND_MESSAGE = \"message/api/random_message/\";\r\n\r\nexport {BASE, SEND_MESSAGE};","import React, {useState} from 'react';\r\n// @mui components\r\nimport Box from '@mui/material/Box';\r\nimport Divider from '@mui/material/Divider';\r\nimport Container from '@mui/material/Container';\r\nimport Grid from '@mui/material/Grid';\r\nimport Typography from '@mui/material/Typography';\r\nimport Link from '@mui/material/Link';\r\nimport Button from '@mui/material/Button';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport IconButton from '@mui/material/IconButton';\r\n// @mui icons\r\nimport MailOutlineIcon from '@mui/icons-material/MailOutline';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\r\n// App theme\r\nimport {APP_THEME} from '../../appTheme';\r\n// Contact form\r\nimport ContactForm from './ContactForm';\r\n// Other components\r\nimport AppCard from '../home/components/AppCard';\r\nimport ProgrammerVibin from './media/programmer_vibin.gif';\r\n\r\nconst EMAIL = \"mdarafatzaman1@gmail.com\";\r\n\r\n/* The Contact page */\r\nconst Contact: React.FC = () => {\r\n    \r\n    interface SnackDataType {\r\n        open: boolean;\r\n        message: string;\r\n    }\r\n    \r\n    // State manager for snackbar\r\n    const [snackData, setSnackData] = useState<SnackDataType>({} as SnackDataType);\r\n    \r\n    // Close the snackbar\r\n    const closeSnackbar = () => {\r\n        setSnackData((prev) => ({...prev, open: false}) );\r\n    };\r\n    \r\n    // Open the snackbar\r\n    const openSnackbar: (message: string) => () => void = (message: string) => () => {\r\n        setSnackData(() => ({open: true, message: message}))\r\n    };\r\n\r\n    // Function to copy email to clipboard\r\n    const copyAddress = () => {\r\n        navigator.clipboard.writeText(EMAIL);\r\n        openSnackbar(\"Copied email to clipboard.\")();\r\n    };\r\n\r\n\r\n    return (\r\n        <Container sx={{p: 2}}>\r\n            <AppCard>\r\n                <Box \r\n                    py={2} px={4}\r\n                    display=\"flex\" alignItems=\"center\" \r\n                    sx={{backgroundColor: APP_THEME.palette.primary.light}}\r\n                >\r\n                    <Grid container spacing={2}>\r\n                        {/* Gif */}\r\n                        <Grid item xs={12} md=\"auto\">\r\n                            <img src={ProgrammerVibin} style={{objectFit: \"contain\", maxWidth: \"400px\"}} />\r\n                        </Grid>\r\n\r\n                        {/* Contact info */}\r\n                        <Grid item xs={12} md sx={{backgroundColor:\"rgba(255,255,255,0)\"}}>\r\n                            <AppCard sx={{height: \"100%\", width: \"100%\", backgroundColor:\"rgba(255,255,255,0)\"}}>\r\n                                <Box\r\n                                    sx={{\r\n                                        p: 2,\r\n                                        backgroundColor: \"rgba(255,255,255,0.75)\",\r\n                                        transition: \"all 200ms ease-in-out\",\r\n                                        \"&:hover\": {\r\n                                            backgroundColor: \"rgba(255,255,255,0.95)\"\r\n                                        },\r\n                                        height: \"100%\"\r\n                                    }}\r\n                                >   \r\n                                    {/* Header */}\r\n                                    <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\r\n                                        <MailOutlineIcon fontSize='large'/>\r\n                                        <Typography variant=\"h4\" sx={{ml: 1}}><u>Contact</u></Typography>\r\n                                    </Box>\r\n                                    <Divider sx={{my: 1}} />\r\n                                    {/* Email */}\r\n                                    <Box p={2}>\r\n                                        <Typography variant=\"h5\"><u>Email</u></Typography>\r\n                                        <Typography>\r\n                                            For business inquiries, email me at <Link href={`mailTo:${EMAIL}`}>{EMAIL}</Link>.\r\n                                        </Typography>\r\n                                        <Box pt={1}>\r\n                                            <Button startIcon={<ContentCopyIcon/>} variant=\"contained\" onClick={copyAddress}>Copy Address</Button>\r\n                                        </Box>\r\n                                    </Box>\r\n\r\n                                    {/* or  */}\r\n                                    <Box display=\"flex\" flexDirection=\"row\" alignItems=\"center\" px={2} py={0}>\r\n                                        <Box flexGrow={.5}><Divider/></Box>\r\n                                        <Typography sx={{mx: 1}} variant=\"caption\" color=\"GrayText\">or</Typography>\r\n                                        <Box flexGrow={.5}><Divider/></Box>\r\n                                    </Box>\r\n\r\n                                    {/* Contact form */}\r\n                                    <ContactForm/>\r\n                                </Box>\r\n                            </AppCard>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Box>\r\n            </AppCard>\r\n\r\n            {/* Snackbar to alert */}\r\n            <Snackbar\r\n                anchorOrigin={{\r\n                    vertical: \"bottom\",\r\n                    horizontal: \"left\"\r\n                }}\r\n                open={snackData.open}\r\n                autoHideDuration={6000}\r\n                onClose={closeSnackbar}\r\n                message={snackData.message}\r\n                action={\r\n                    <IconButton onClick={closeSnackbar}>\r\n                        <CloseIcon htmlColor=\"#fff\"/>\r\n                    </IconButton>\r\n                }\r\n            />\r\n            \r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Contact;","import React from 'react';\r\n// @mui Components\r\nimport Box from '@mui/material/Box';\r\nimport {SxProps} from '@mui/material/styles';\r\nimport {APP_THEME} from '../../../appTheme';\r\n\r\ninterface AppCardProps {\r\n    children: JSX.Element | JSX.Element[];\r\n    sx?: SxProps \r\n};\r\n\r\n/**\r\n * Custom app card \r\n * @param props A sx prop similar to @mui components and a children(s)\r\n * @returns \r\n */\r\nconst AppCard: React.FC<AppCardProps> = (props: AppCardProps) => {\r\n    const {children, sx} = props;\r\n\r\n    const ContainerStyles: SxProps = {\r\n        backgroundColor: \"#fff\",\r\n        borderRadius: \"12px\",\r\n        boxShadow: APP_THEME.shadows[3],\r\n        position: \"relative\",\r\n        overflow: \"hidden\"\r\n    };\r\n\r\n    return (\r\n        <Box sx={[ContainerStyles, ...(Array.isArray(sx) ? sx : [sx])]}>\r\n            {children}\r\n        </Box>\r\n    )\r\n};\r\n\r\nexport default AppCard;"],"names":["useState","title","setTitle","message","setMessage","valid","setValid","open","severity","SnackData","setSnackData","closeSnackbar","prev","snackError","useEffect","length","Box","p","Typography","variant","display","mt","alignItems","TextField","value","onChange","e","currentTarget","substring","label","size","fullWidth","InputProps","startAdornment","Icon","className","sx","mr","helperText","rows","multiline","Button","color","startIcon","Send","disabled","onClick","preventDefault","fetch","mode","method","headers","body","JSON","stringify","then","resp","json","status","catch","Snackbar","autoHideDuration","onClose","Alert","action","EMAIL","snackData","Container","AppCard","py","px","backgroundColor","APP_THEME","Grid","container","spacing","item","xs","md","src","ProgrammerVibin","style","objectFit","maxWidth","height","width","transition","justifyContent","MailOutline","fontSize","ml","Divider","my","Link","href","pt","ContentCopy","navigator","clipboard","writeText","flexDirection","flexGrow","mx","anchorOrigin","vertical","horizontal","IconButton","Close","htmlColor","props","children","ContainerStyles","borderRadius","boxShadow","position","overflow","Array","isArray"],"sourceRoot":""}