{"version":3,"file":"static/js/771.5c49604d.chunk.js","mappings":"ySAqBA,I,IAAIA,GAA4B,EAoIhC,EAlI8B,WAG1B,IAAMC,GAAgDC,EAAAA,EAAAA,aA0HtD,OAvHAC,EAAAA,EAAAA,YAAU,WAAO,IAAD,MACNC,EAAoC,QAAvB,EAAGH,EAAaI,eAAO,aAApB,EAAsBC,YACtCC,EAAqC,QAAvB,EAAGN,EAAaI,eAAO,aAApB,EAAsBG,aAEvCC,EAAS,IAAIC,EAAAA,IACbC,EAAY,IAAID,EAAAA,IAAoB,CAACE,WAAW,IAEtDD,EAAUE,YAAcH,EAAAA,IACxBC,EAAUG,eAAiBJ,EAAAA,IAC3BC,EAAUI,UAAUC,SAAU,EAC9BL,EAAUI,UAAUE,KAAOP,EAAAA,IAEJ,IAAIA,EAAAA,IAAsBC,GAClCO,+BAGf,IAAMC,EAAU,IAAIT,EAAAA,IAAwB,GAAIN,EAAMG,EAAQ,GAAK,KACnEY,EAAQC,SAASC,EAAI,EACrBF,EAAQC,SAASE,EAAI,EACrBH,EAAQI,SAAe,GA9BdC,KAAKC,GAAG,KA+BjBN,EAAQO,yBAER,IAAMC,EAAW,IAAIC,EAAAA,EAAcT,EAASR,EAAUkB,YACtDF,EAASG,SACTH,EAASI,iBAAiB,SAAS,WAC/B/B,GAAmB,CACvB,IACA2B,EAASI,iBAAiB,OAAO,WAC7B/B,GAAmB,CACvB,IAGA,IAAMgC,EAAuBC,EAAAA,EAAAA,QAAAA,WAAAA,MAE7BxB,EAAOyB,WAAa,IAAIxB,EAAAA,IAAayB,SAASH,EAAqBI,UAAU,GAAI,KACjFzB,EAAU0B,QAAQjC,EAAOG,GACL,QAApB,EAAAN,EAAaI,eAAO,OAApB,EAAsBiC,YAAY3B,EAAUkB,YAG5C,IAAMU,EAAe,IAAI7B,EAAAA,IAAoB,SAAU,GACvDD,EAAO+B,IAAKD,GAIZ,IADA,IAAME,EAAO,EAAE,EAAG,EAAG,GACZpB,EAAI,EAAGA,EAAI,EAAGA,IACnB,IAAK,IAAIqB,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACxB,IAAMC,EAAmB,IAAIjC,EAAAA,IAAuB,SAAU,IAC9DiC,EAAiBC,YAAa,EAC9BD,EAAiBvB,SAASyB,IAAIJ,EAAKC,GAAI,GAAID,EAAKpB,IAChDsB,EAAiBG,OAAO1B,SAASyB,IAAIJ,EAAKC,GAAI,EAAGD,EAAKpB,IACtDZ,EAAO+B,IAAIG,GACXlC,EAAO+B,IAAIG,EAAiBG,OAChC,CAMJ,IAFA,IAAMC,EAAe,CAAC,EAAG,EAAG,GAAI,GAC1BC,EAAe,CAAC,EAAG,GAAI,EAAG,GACvBC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACxB,IAAMC,EAAwB,IAAIxC,EAAAA,IAAuB,SAAU,IACnEwC,EAAsBN,YAAa,EACnCM,EAAsB9B,SAASyB,IAAIE,EAAaE,GAAI,EAAGD,EAAaC,IACpEC,EAAsBJ,OAAO1B,SAASyB,IAAI,EAAE,EAAE,GAC9CpC,EAAO+B,IAAIU,GACXzC,EAAO+B,IAAIU,EAAsBJ,OACrC,CAGA,IAQIK,EAREC,EAAyB,IAAI1C,EAAAA,IAAuB,SAAU,IACpE0C,EAAuBhC,SAASyB,IAAI,GAAG,GAAG,GAC1CO,EAAuBN,OAAO1B,SAASyB,IAAI,EAAE,EAAE,GAC/CpC,EAAO+B,IAAIY,GACX3C,EAAO+B,IAAIY,EAAuBN,SAGnB,IAAIO,EAAAA,GAGZC,KAjGoB,oCAmGvB,SAACC,GACGJ,EAAuBI,EAAKC,MAC5B/C,EAAO+B,IAAIe,EAAKC,MAEpB,QAAGC,GAAW,SAACC,GACXC,QAAQC,IAAIF,EAChB,IAwBJ,OApBgB,SAAVG,IACFC,sBAAsBD,GACtBlD,EAAUoD,OAAOtD,EAAQU,GACrBgC,aAAgCzC,EAAAA,MAAgBV,IAAoBgE,EAAAA,EAAAA,IAA6BrD,EAAUkB,cAC3GsB,EAAqBc,SAAS3C,GAAK,KAEvCK,EAASG,QACb,CACA+B,GAGAK,OAAOnC,iBAAiB,UAAU,WAAO,IAAD,IAC9BoC,EAA4B,QAAvB,EAAGlE,EAAaI,eAAO,aAApB,EAAsBC,YAC9B8D,EAA6B,QAAvB,EAAGnE,EAAaI,eAAO,aAApB,EAAsBG,aACrCG,EAAU0B,QAAS8B,EAAOC,GAC1BjD,EAAQkD,OAASF,EAAQC,EACzBjD,EAAQO,wBACZ,IAGO,WAC0B,OAAzBzB,EAAaI,UACbJ,EAAaI,QAAQiE,UAAY,GACjC3D,EAAU4D,UAElB,CACJ,GAAG,KAIC,gBAAKC,MAAO,CAACJ,OAAQ,OAAQD,MAAO,QAASM,IAAKxE,GAE1D,E,6BCnEA,EA5EsC,WAElC,IAAMyE,EAAoB,CAAC,qBAAsB,aAAc,oBAAqB,aAAc,gBAClG,GAAkCC,EAAAA,EAAAA,UAAiB,GAAE,eAA9CC,EAAW,KAAEC,EAAU,KAS9B,IAAM5E,GAA6CC,EAAAA,EAAAA,aAG7C4E,GAAsBC,EAAAA,EAAAA,IAAS,wJAU/BC,GAA0BD,EAAAA,EAAAA,IAAS,sLAiBnCE,EAA+B,CACjCC,YAAa,oBACbC,QAAS,eACTC,GAAI,EACJC,UAAU,GAAD,OAAKP,EAAmB,2CAAmCE,EAAuB,2BAC3FM,WAAY,SACZC,aAAc,OACdC,SAAU,SACVrB,MAAO,OAILsB,EAAkB,0BAaxB,OAZAtF,EAAAA,EAAAA,YAAU,WACFF,EAAaI,mBAAmBqF,aAA+C,qBAAzBzF,EAAaI,UAA4BJ,EAAaI,QAAQsF,UAAUC,SAASH,KACvIxF,EAAaI,QAAQ0B,iBAAiB,sBAAsB,SAAC2B,GACrDA,EAAEmC,gBAAkBb,EAAwBc,MAnDxDjB,GAAY,SAACkB,GAAS,OAAKA,EAAYrB,EAAQsB,OAAO,EAAID,EAAU,EAAI,CAAC,GAsDrE,IAEA9F,EAAaI,QAAQsF,UAAUnD,IAAIiD,GAE3C,GAAG,CAACxF,EAAaI,WAGb,UAAC4F,EAAA,EAAU,CAACC,QAAQ,KAAKC,GAAI,CAAC/E,SAAU,WAAY+D,QAAS,OAAQiB,cAAe,OAAO,WACvF,SAACH,EAAA,EAAU,CAACC,QAAQ,UAAS,SAAC,aAE9B,SAACG,EAAA,EAAG,CAAC7B,MAAO,CAACW,QAAS,eAAgB/D,SAAU,YAAY,UAAC,UAAC6E,EAAA,EAAU,CAACC,QAAQ,UAAUC,GAAIlB,EAAqBR,IAAKxE,EAAa,UAAC,OAAOyE,EAAQE,UAGlK,ECMA,EArE6B,WAEzB,OACI,iCAEA,SAAC0B,EAAA,GAAI,CAACC,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAE,UAErB,SAAC,KAAiB,CAACpB,UAAU,aAAaqB,MAAO,IAAI,UACjD,UAACC,EAAA,EAAO,CAACR,GAAI,CACTS,QAAS,EACTC,SAAU,GACZ,WAEE,gBACIC,I,i/OACAtC,MAAO,CACHuC,UAAW,UACX5C,MAAO,OACP/C,SAAU,WACV4F,OAAQ,EACRC,KAAM,EACNC,OAAQ,MAKhB,UAACb,EAAA,EAAG,CAACF,GAAI,CACLgB,gBAAiB,gBACjBD,OAAQ,EACR9F,SAAU,YACZ,WACE,SAAC6E,EAAA,EAAU,CAACC,QAAQ,KAAKC,GAAI,CAACiB,WAAY,QAAQ,SAAC,qBACnD,SAACf,EAAA,EAAG,CAACgB,GAAI,EAAE,UACP,SAAC,EAAmB,OAExB,SAACC,EAAA,EAAM,CAACpB,QAAQ,YAAYqB,MAAM,UAAUpB,GAAI,CAACiB,WAAY,QAASI,WAAW,SAACC,EAAA,EAAe,IAAIC,KAAK,aAAa5E,OAAO,SAAQ,SAAC,iBAGvI,mBACA,SAACwE,EAAA,EAAM,CAACpB,QAAQ,YAAYqB,MAAM,UAAUpB,GAAI,CAACiB,WAAY,OAAQO,GAAI,GAAIH,WAAW,SAACI,EAAA,EAAU,IAC/FF,KAAK,mCAAmC5E,OAAO,SAAQ,SAC1D,sBASjB,SAACwD,EAAA,GAAI,CAACC,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAE,UACrB,UAACJ,EAAA,EAAG,CAAClB,QAAQ,OAAOiB,cAAc,SAASD,GAAI,CAAC/B,OAAQ,OAAQD,MAAO,QAAQ,WAC3E,SAACkC,EAAA,EAAG,CAACwB,SAAU,EAAE,UACb,SAAC,EAAW,OAIhB,SAACxB,EAAA,EAAG,CAAClC,MAAM,OAAOgB,QAAQ,OAAO2C,eAAe,SAAQ,UACpD,UAAC7B,EAAA,EAAU,CAACC,QAAQ,UAAUqB,MAAM,WAAU,WAAC,SAACQ,EAAA,EAAI,CAACL,KAAK,wBAAwB5E,OAAO,SAASqD,GAAI,CAClGoB,MAAO,UACPS,oBAAqB,WACvB,SAAC,mBAAqB,qCAM5C,C,4ECpDA,IAlBwC,SAACC,GACrC,IAAOC,EAAgBD,EAAhBC,SAAU/B,EAAM8B,EAAN9B,GAEXgC,EAA2B,CAC7BhB,gBAAiB,OACjBiB,aAAc,OACdC,UAAWpG,EAAAA,EAAAA,QAAAA,GACXb,SAAU,WACVoE,SAAU,UAGd,OACI,SAAC,IAAG,CAACW,GAAE,CAAGgC,GAAe,eAAMG,MAAMC,QAAQpC,GAAMA,EAAK,CAACA,KAAM,SAC1D+B,GAGb,C","sources":["pages/home/raspberry/index.tsx","pages/home/components/TypewriterGreetings.tsx","pages/home/GridLayer1.tsx","pages/home/components/AppCard.tsx"],"sourcesContent":["import React, {useEffect, createRef} from 'react';\r\nimport * as THREE from 'three';\r\nimport {GLTFLoader} from 'three/examples/jsm/loaders/GLTFLoader';\r\nimport {OrbitControls} from 'three/examples/jsm/controls/OrbitControls';\r\n// @ mui components\r\n// Others\r\nimport {APP_THEME} from '../../../appTheme';\r\n// Utils\r\nimport {isAnyPartOfElementInViewport} from '../../../utils';\r\n\r\nconst RASPBERRY_PI_MODEL: string = \"./models/raspberry_pi/scene.gltf\";\r\n\r\n/**\r\n * A function to return a radian from a deg\r\n * @param deg The degree in degrees\r\n * @returns The radian\r\n */\r\nfunction toRad(deg: number): number {\r\n    return deg * Math.PI/180;\r\n}\r\n\r\nlet OrbitInteraction: boolean = false;\r\n\r\nconst RaspberryPI: React.FC = () => {\r\n\r\n    // Ref for container\r\n    const ContainerRef: React.RefObject<HTMLDivElement> = createRef();\r\n\r\n    // Constructor\r\n    useEffect(() => {\r\n        const WIDTH: number = ContainerRef.current?.clientWidth as number;\r\n        const HEIGHT: number = ContainerRef.current?.clientHeight as number;\r\n        // Create scene, renderer, and camera\r\n        const _scene = new THREE.Scene();\r\n        const _renderer = new THREE.WebGLRenderer({antialias: true});\r\n        // Adjust renderer\r\n        _renderer.toneMapping = THREE.ACESFilmicToneMapping;\r\n        _renderer.outputEncoding = THREE.sRGBEncoding;\r\n        _renderer.shadowMap.enabled = true;\r\n        _renderer.shadowMap.type = THREE.PCFShadowMap;\r\n\r\n        const pmremGenerator = new THREE.PMREMGenerator( _renderer );\r\n        pmremGenerator.compileEquirectangularShader();\r\n\r\n        // Add camera\r\n        const _camera = new THREE.PerspectiveCamera(75, WIDTH/HEIGHT, 0.1, 1000);\r\n        _camera.position.z = 7;\r\n        _camera.position.y = 3;\r\n        _camera.rotateX(toRad(-30));\r\n        _camera.updateProjectionMatrix();\r\n        // Add controls\r\n        const Controls = new OrbitControls(_camera, _renderer.domElement);\r\n        Controls.update();\r\n        Controls.addEventListener(\"start\", () => {\r\n            OrbitInteraction = true;\r\n        })\r\n        Controls.addEventListener(\"end\", () => {\r\n            OrbitInteraction = false;\r\n        })\r\n\r\n        // SETUP\r\n        const sceneBackgroundColor = APP_THEME.palette.background.paper;\r\n        // The first index is removed because it is a #\r\n        _scene.background = new THREE.Color( parseInt(sceneBackgroundColor.substring(1), 16) ); \r\n        _renderer.setSize(WIDTH, HEIGHT);\r\n        ContainerRef.current?.appendChild(_renderer.domElement);\r\n        \r\n        // Add lighting\r\n        const AmbientLight = new THREE.AmbientLight( 0xD8D8D8, 1 ); // soft white light\r\n        _scene.add( AmbientLight );\r\n\r\n        // Add Directional Light as a grid from the top\r\n        const GRID = [-5, 0, 5];\r\n        for (let z = 0; z < 3; z++) {\r\n            for (let x = 0; x < 3; x++) {\r\n                const DirectionalLight = new THREE.DirectionalLight(0xffffff, 0.2);\r\n                DirectionalLight.castShadow = true;\r\n                DirectionalLight.position.set(GRID[x], 10, GRID[z]);\r\n                DirectionalLight.target.position.set(GRID[x], 0, GRID[z]);\r\n                _scene.add(DirectionalLight);\r\n                _scene.add(DirectionalLight.target);\r\n            }\r\n        }\r\n\r\n        // Add directional light from 4 different sides\r\n        const PLANE_GRID_X = [0, 6, 0, -6];\r\n        const PLANE_GRID_Y = [6, 0, -6, 0];\r\n        for (let i = 0; i < 4; i++) {\r\n            const PlaneDirectionalLight = new THREE.DirectionalLight(0xffffff, 0.5);\r\n            PlaneDirectionalLight.castShadow = true;\r\n            PlaneDirectionalLight.position.set(PLANE_GRID_X[i], 0, PLANE_GRID_Y[i]);\r\n            PlaneDirectionalLight.target.position.set(0,0,0);\r\n            _scene.add(PlaneDirectionalLight);\r\n            _scene.add(PlaneDirectionalLight.target);\r\n        }\r\n        \r\n        // Add a Directional light from the bottom\r\n        const BottomDirectionalLight = new THREE.DirectionalLight(0xffffff, 0.2);\r\n        BottomDirectionalLight.position.set(0,-10,0);\r\n        BottomDirectionalLight.target.position.set(0,0,0);\r\n        _scene.add(BottomDirectionalLight);\r\n        _scene.add(BottomDirectionalLight.target); \r\n\r\n        // Load Raspberry PI model\r\n        const loader = new GLTFLoader();\r\n        let loadedRaspberryModel: THREE.Group;\r\n\r\n        loader.load(\r\n            RASPBERRY_PI_MODEL,\r\n            (gltf) => {\r\n                loadedRaspberryModel = gltf.scene;\r\n                _scene.add(gltf.scene);\r\n                \r\n            }, undefined, (e) => {\r\n                console.log(e);\r\n            }\r\n        );\r\n\r\n        // Animation\r\n        const animate = () => {\r\n            requestAnimationFrame(animate);\r\n            _renderer.render(_scene, _camera);\r\n            if (loadedRaspberryModel instanceof THREE.Group && !OrbitInteraction && isAnyPartOfElementInViewport(_renderer.domElement)) {\r\n                loadedRaspberryModel.rotation.y += 0.01;\r\n            };\r\n            Controls.update();\r\n        };\r\n        animate();\r\n\r\n        // Added resize event listener\r\n        window.addEventListener(\"resize\", () => {\r\n            const width = ContainerRef.current?.clientWidth as number;\r\n            const height = ContainerRef.current?.clientHeight as number;\r\n            _renderer.setSize( width, height );\r\n            _camera.aspect = width / height;\r\n            _camera.updateProjectionMatrix();\r\n        })\r\n\r\n        // Destructing\r\n        return () => {\r\n            if (ContainerRef.current !== null) {\r\n                ContainerRef.current.innerHTML = \"\";\r\n                _renderer.dispose();\r\n            }\r\n        }\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div style={{height: \"100%\", width: \"100%\"}} ref={ContainerRef}></div>\r\n    )\r\n};\r\n\r\nexport default RaspberryPI;\r\n","import React, {useState, createRef, useEffect} from 'react';\r\n// @mui components\r\nimport Typography from '@mui/material/Typography';\r\nimport Box from '@mui/material/Box';\r\nimport {SxProps} from '@mui/material/styles';\r\n// Emotion css\r\nimport {keyframes} from '@mui/system';\r\n\r\nconst TypewriterGreetings: React.FC = () => {\r\n\r\n    const Content: string[] = [\"software developer\", \"freelancer\", \"motivated learner\", \"risk taker\", \"change maker\"];\r\n    const [currContent, setContent] = useState<number>(0);\r\n\r\n    // Update content - Cycle back to first if current content is the last\r\n    function updateContent() {\r\n        setContent( (prevValue) => prevValue < Content.length-1 ? prevValue+1 : 0 );\r\n    };\r\n\r\n    \r\n    // Typewriter container ref\r\n    const ContainerRef: React.RefObject<HTMLElement> = createRef();\r\n    \r\n    // Typewriter animations\r\n    const TypewriterKeyframes = keyframes`\r\n    from {\r\n        border-right-color: #2F3030;\r\n    }\r\n    to {\r\n        border-right-color: rgba(47, 48, 48, 0);\r\n    }\r\n    `;\r\n\r\n    // The rewrite content animation\r\n    const RewriteContentKeyframes = keyframes`\r\n    0% {\r\n        width: 0%;\r\n    }\r\n    20% {\r\n        width: 95%;\r\n    }\r\n    80% {\r\n        width: 95%;\r\n    }\r\n    100% {\r\n        width: 0%;\r\n    }\r\n    `;\r\n\r\n    // Typewriter Container style\r\n    // The container only animates the cursor\r\n    const TypewriterContainer: SxProps = {\r\n        borderRight: \"5px solid #2F3030\",\r\n        display: \"inline-block\",\r\n        pr: 1,\r\n        animation: `${TypewriterKeyframes} 200ms ease infinite alternate, ${RewriteContentKeyframes} 1500ms linear infinite`,\r\n        whiteSpace: \"nowrap\",\r\n        textOverflow: \"clip\",\r\n        overflow: \"hidden\",\r\n        width: \"95%\"\r\n    };\r\n\r\n    // A string class should be added to the ref element to indicate that event listener has already been added.\r\n    const ANIMATION_ADDED = \"animation-added-i18xlkn\";\r\n    useEffect(() => {\r\n        if (ContainerRef.current instanceof HTMLElement && typeof ContainerRef.current !== \"undefined\" && !ContainerRef.current.classList.contains(ANIMATION_ADDED)) {\r\n            ContainerRef.current.addEventListener(\"animationiteration\", (e: AnimationEvent) => {\r\n                if (e.animationName === RewriteContentKeyframes.name) {\r\n                    updateContent();\r\n                }\r\n            });\r\n            // Add a class to indicate that animation has been added\r\n            ContainerRef.current.classList.add(ANIMATION_ADDED);\r\n        }\r\n    }, [ContainerRef.current]);\r\n\r\n    return (\r\n        <Typography variant=\"h6\" sx={{position: \"relative\", display: \"flex\", flexDirection: \"row\"}}>\r\n            <Typography variant=\"inherit\">I am a </Typography>\r\n\r\n            <Box style={{display: \"inline-block\", position: \"relative\"}}><Typography variant=\"inherit\" sx={TypewriterContainer} ref={ContainerRef}>&nbsp;{Content[currContent]}</Typography></Box>\r\n        </Typography>\r\n    );\r\n};\r\n\r\nexport default TypewriterGreetings;","import React from 'react';\r\n// @mui components\r\nimport Grid from '@mui/material/Grid';\r\nimport Typography from '@mui/material/Typography';\r\nimport Box from '@mui/material/Box';\r\nimport Link from '@mui/material/Link';\r\nimport Button from '@mui/material/Button';\r\n// @mui icons\r\nimport GitHubIcon from '@mui/icons-material/GitHub';\r\nimport DescriptionIcon from '@mui/icons-material/Description';\r\n// Other components\r\nimport AppCard from './components/AppCard';\r\nimport RaspberryPI from './raspberry';\r\nimport TypewriterGreetings from './components/TypewriterGreetings';\r\n// SVGs\r\nimport backdropSVG from './media/backdrop.png';\r\n// Util components\r\nimport {ElementInViewport} from '../../utils';\r\n\r\nconst GridLayer1: React.FC = () => {\r\n\r\n    return (\r\n        <>\r\n        {/* The software developer container */}\r\n        <Grid item xs={12} md={6}>\r\n            {/* Wrap the appcard so that it fadesin from left */}\r\n            <ElementInViewport animation='fadeInLeft' delay={500}>\r\n                <AppCard sx={{\r\n                    padding: 4,\r\n                    paddingY: 8\r\n                }}>\r\n                    {/* The backdrop */}\r\n                    <img \r\n                        src={backdropSVG} \r\n                        style={{\r\n                            objectFit: \"contain\",\r\n                            width: \"100%\",\r\n                            position: \"absolute\",\r\n                            bottom: 0,\r\n                            left: 0,\r\n                            zIndex: 0\r\n                        }}\r\n                    />\r\n                    \r\n                    {/* Content */}\r\n                    <Box sx={{\r\n                        backgroundColor: \"rgba(0,0,0,0)\",\r\n                        zIndex: 1,\r\n                        position: \"relative\"\r\n                    }}>\r\n                        <Typography variant=\"h5\" sx={{fontWeight: \"bold\"}}>Hi! I am Arafat</Typography>\r\n                        <Box mb={1}>\r\n                            <TypewriterGreetings/>\r\n                        </Box>\r\n                        <Button variant=\"contained\" color=\"primary\" sx={{fontWeight: \"bold\"}} startIcon={<DescriptionIcon/>} href=\"resume.pdf\" target=\"_blank\">\r\n                            View Resume\r\n                        </Button>\r\n                        <br/>\r\n                        <Button variant=\"contained\" color=\"inherit\" sx={{fontWeight: \"bold\", mt: 1}} startIcon={<GitHubIcon/>}\r\n                            href=\"https://github.com/M-ArafatZaman\" target=\"_blank\"\r\n                        >\r\n                            Github\r\n                        </Button>\r\n                    </Box>\r\n                </AppCard>\r\n            </ElementInViewport>\r\n        </Grid>\r\n        \r\n        {/* RaspberryPI component */}\r\n        <Grid item xs={12} md={6}>\r\n            <Box display=\"flex\" flexDirection=\"column\" sx={{height: \"100%\", width: \"100%\"}}>  \r\n                <Box flexGrow={1}>\r\n                    <RaspberryPI/>\r\n                </Box>\r\n                \r\n                {/* Raspberry PI tag */}\r\n                <Box width=\"100%\" display=\"flex\" justifyContent=\"center\">\r\n                    <Typography variant=\"caption\" color=\"GrayText\"><Link href=\"https://skfb.ly/oBs8I\" target=\"_blank\" sx={{\r\n                        color: \"inherit\",\r\n                        textDecorationColor: \"inherit\"\r\n                    }}>\"Raspberry Pi\"</Link> by Aleksander Buzlaev</Typography>\r\n                </Box>\r\n            </Box>\r\n        </Grid>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default GridLayer1;","import React from 'react';\r\n// @mui Components\r\nimport Box from '@mui/material/Box';\r\nimport {SxProps} from '@mui/material/styles';\r\nimport {APP_THEME} from '../../../appTheme';\r\n\r\ninterface AppCardProps {\r\n    children: JSX.Element | JSX.Element[];\r\n    sx?: SxProps \r\n};\r\n\r\n/**\r\n * Custom app card \r\n * @param props A sx prop similar to @mui components and a children(s)\r\n * @returns \r\n */\r\nconst AppCard: React.FC<AppCardProps> = (props: AppCardProps) => {\r\n    const {children, sx} = props;\r\n\r\n    const ContainerStyles: SxProps = {\r\n        backgroundColor: \"#fff\",\r\n        borderRadius: \"12px\",\r\n        boxShadow: APP_THEME.shadows[3],\r\n        position: \"relative\",\r\n        overflow: \"hidden\"\r\n    };\r\n\r\n    return (\r\n        <Box sx={[ContainerStyles, ...(Array.isArray(sx) ? sx : [sx])]}>\r\n            {children}\r\n        </Box>\r\n    )\r\n};\r\n\r\nexport default AppCard;"],"names":["OrbitInteraction","ContainerRef","createRef","useEffect","WIDTH","current","clientWidth","HEIGHT","clientHeight","_scene","THREE","_renderer","antialias","toneMapping","outputEncoding","shadowMap","enabled","type","compileEquirectangularShader","_camera","position","z","y","rotateX","Math","PI","updateProjectionMatrix","Controls","OrbitControls","domElement","update","addEventListener","sceneBackgroundColor","APP_THEME","background","parseInt","substring","setSize","appendChild","AmbientLight","add","GRID","x","DirectionalLight","castShadow","set","target","PLANE_GRID_X","PLANE_GRID_Y","i","PlaneDirectionalLight","loadedRaspberryModel","BottomDirectionalLight","GLTFLoader","load","gltf","scene","undefined","e","console","log","animate","requestAnimationFrame","render","isAnyPartOfElementInViewport","rotation","window","width","height","aspect","innerHTML","dispose","style","ref","Content","useState","currContent","setContent","TypewriterKeyframes","keyframes","RewriteContentKeyframes","TypewriterContainer","borderRight","display","pr","animation","whiteSpace","textOverflow","overflow","ANIMATION_ADDED","HTMLElement","classList","contains","animationName","name","prevValue","length","Typography","variant","sx","flexDirection","Box","Grid","item","xs","md","delay","AppCard","padding","paddingY","src","objectFit","bottom","left","zIndex","backgroundColor","fontWeight","mb","Button","color","startIcon","Description","href","mt","GitHub","flexGrow","justifyContent","Link","textDecorationColor","props","children","ContainerStyles","borderRadius","boxShadow","Array","isArray"],"sourceRoot":""}