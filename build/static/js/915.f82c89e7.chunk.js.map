{"version":3,"file":"static/js/915.f82c89e7.chunk.js","mappings":"8JAGO,IAAMA,EAAY,wBACZC,EAAY,uB,wJC+FzB,UAvE4B,WAExB,OAA6BC,EAAAA,EAAAA,YAAWC,EAAAA,GAAcC,EAAAA,IAAoB,eAAnEC,EAAQ,KAAEC,EAAQ,KAoDzB,OAjDAC,EAAAA,EAAAA,YAAU,WAEN,IAAMC,EAA8B,IAAIC,gBAClCC,EAAsBF,EAAWE,OAwCvC,OArCAJ,EAAS,CAACK,KAAMC,EAAAA,KAGhBC,MAAM,GAAD,OAAIC,EAAAA,GAAI,OAAGd,EAAAA,IAAa,CACzBe,OAAQ,MACRC,KAAM,OACNN,OAAQA,IAEXO,MAAK,SAACC,GAAQ,OAAKA,EAASC,MAAM,IAClCF,MAAK,SAACC,GACqB,OAApBA,EAASE,OAETd,EAAS,CACLK,KAAMU,EAAAA,EACNC,QAAS,CACLC,MAAOL,EAASA,YAKxBZ,EAAS,CAAEK,KAAMa,EAAAA,GAAOF,QAAS,CAACG,aAAc,6CAExD,IACCC,OAAM,WAEHpB,EAAS,CAAEK,KAAMa,EAAAA,GAAOF,QAAS,CAACG,aAAc,sCACpD,IACCE,SAAQ,WACLrB,EAAS,CACLK,KAAMiB,EAAAA,GACNN,QAAS,CACLO,WAAW,IAGvB,IAGO,WACHvB,EAAS,CAAEK,KAAMmB,EAAAA,KACjBtB,EAAWuB,OACf,CACJ,GAAG,KAGC,UAAC,IAAS,CAACC,GAAI,CAACC,GAAI,GAAG,WAEnB,UAAC,IAAG,CAACC,QAAQ,OAAOC,WAAW,SAASC,eAAe,SAAQ,WAC3D,SAAC,IAAQ,CAACC,SAAS,QAAQL,GAAI,CAACM,GAAI,MACpC,SAAC,IAAU,CAACC,QAAQ,KAAI,SAAC,cAE7B,SAAC,IAAO,CAACP,GAAI,CAACQ,GAAI,EAAGC,GAAI,MAGzB,SAAC,cAAqB,CAACC,MAAOrC,EAAS,UACnC,SAAC,KAAM,QAIvB,C,uPC3EaO,EAAa,aACbS,EAAe,eACfO,EAAoB,oBACpBE,EAAc,cACdN,EAAQ,QACRmB,GAAeC,EAAAA,EAAAA,eAAgC,CAAC,GAEhDzC,EAAe,SAAC0C,EAAyBC,GAClD,OAAQA,EAAOnC,MACX,KAAKU,EAAe,IAAD,EACf,MAAO,CACHQ,WAAW,EACXN,MAAqB,QAAhB,EAAEuB,EAAOxB,eAAO,aAAd,EAAgBC,MACvBwB,OAAO,EACPtB,aAAc,IAGtB,KAAKG,EAAoB,IAAD,EACpB,OAAO,kBACAiB,GAAK,IACRhB,UAAyB,QAAhB,EAAEiB,EAAOxB,eAAO,aAAd,EAAgBO,YAGnC,KAAKjB,EACL,KAAKkB,EACD,MAAO,CACHD,WAAW,EACXN,MAAO,GACPwB,OAAO,EACPtB,aAAc,IAGtB,KAAKD,EAAQ,IAAD,EACR,OAAO,kBACAqB,GAAK,IACRE,OAAO,EACPtB,cAA4B,QAAd,EAAAqB,EAAOxB,eAAO,aAAd,EAAgBG,eAAgB,8BAGtD,QACI,OAAO,UAAIoB,GAGvB,EAEazC,EAAwC,CACjDyB,WAAW,EACXN,MAAO,GACPwB,OAAO,EACPtB,aAAc,G","sources":["pages/blog/ENDPOINT.ts","pages/blog/index.tsx","pages/blog/reducer.ts"],"sourcesContent":["import {BASE} from '../../config';\r\n\r\nexport {BASE};\r\nexport const GET_BLOGS = \"/blogs/api/get_blogs/\";\r\nexport const READ_BLOG = \"/blogs/api/read_blog/\";","import React, {useEffect, useReducer} from 'react';\r\nimport {Outlet} from 'react-router-dom';\r\n// @mui components\r\nimport Box from '@mui/material/Box';\r\nimport Container from '@mui/material/Container';\r\nimport Typography from '@mui/material/Typography';\r\nimport Divider from '@mui/material/Divider';\r\n// @mui icons\r\nimport FeedIcon from '@mui/icons-material/Feed';\r\n// Blog types\r\nimport {GetBlogsAPIResponse} from './types';\r\n// Endpoints\r\nimport {BASE, GET_BLOGS} from './ENDPOINT';\r\n// Context\r\nimport {\r\n    BlogsContext,\r\n    BlogsReducer,\r\n    BLOGS_INITIAL_STATE,\r\n    // Action types\r\n    INITIALIZE,\r\n    UPDATE_ITEMS,\r\n    UPDATE_IS_LOADING,\r\n    DELETE_DATA,\r\n    ERROR\r\n} from './reducer';\r\n\r\n\r\n/* The Blog page */\r\nconst BlogItems: React.FC = () => {\r\n\r\n    const [pContext, dispatch] = useReducer(BlogsReducer, BLOGS_INITIAL_STATE);\r\n\r\n    // Fetch data from API endpoint\r\n    useEffect(() => {\r\n        // Abort controller\r\n        const controller: AbortController = new AbortController();\r\n        const signal: AbortSignal = controller.signal;\r\n\r\n        // Dispatch an initialize request\r\n        dispatch({type: INITIALIZE});\r\n\r\n        // Fetch\r\n        fetch(`${BASE}${GET_BLOGS}`, {\r\n            method: \"GET\",\r\n            mode: \"cors\",\r\n            signal: signal\r\n        })\r\n        .then((response) => response.json())\r\n        .then((response: GetBlogsAPIResponse) => {\r\n            if (response.status === \"OK\") {\r\n                // Found all blogs\r\n                dispatch({\r\n                    type: UPDATE_ITEMS,\r\n                    payload: {\r\n                        items: response.response\r\n                    }\r\n                })\r\n            } else {\r\n                // An error occured while getting blogs\r\n                dispatch({ type: ERROR, payload: {errorMessage: \"Sorry, an uncaught server error occured.\"}});\r\n            }\r\n        })\r\n        .catch(() => {\r\n            // An error occured\r\n            dispatch({ type: ERROR, payload: {errorMessage: \"Sorry, an uncaught error occured.\"}})\r\n        })\r\n        .finally(() => {\r\n            dispatch({\r\n                type: UPDATE_IS_LOADING,\r\n                payload: {\r\n                    isLoading: false\r\n                }\r\n            })\r\n        })\r\n\r\n        // A destructor to empty the context for optimization\r\n        return () => {\r\n            dispatch({ type: DELETE_DATA })\r\n            controller.abort();\r\n        }\r\n    }, []);\r\n    \r\n    return (\r\n        <Container sx={{py: 2}}>\r\n            {/* Header */}\r\n            <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\r\n                <FeedIcon fontSize=\"large\" sx={{mr: 1}}/>\r\n                <Typography variant=\"h4\">Blogs</Typography>\r\n            </Box>\r\n            <Divider sx={{mt: 1, mb: 2}}/>\r\n\r\n            {/* Portfolio cards */}\r\n            <BlogsContext.Provider value={pContext}>\r\n                <Outlet/>\r\n            </BlogsContext.Provider>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default BlogItems;","import React, {createContext} from 'react';\r\nimport {BlogItems} from './types';\r\n\r\n/**\r\n * The purpose of this context is very similar to that of the portfolio/portfolioContext\r\n * A global context to store *ALL* the blogs but without their content so that their slugs\r\n * Can be used through to provide easy link access\r\n */\r\n\r\nexport interface BlogsContextType {\r\n    isLoading: boolean;\r\n    items: BlogItems[];\r\n    error: boolean;\r\n    errorMessage: string;\r\n}\r\n\r\n// This is the type of action that is to be dispatched\r\nexport interface PortfolioReducerActionType {\r\n    type: string;\r\n    payload?: Partial<BlogsContextType>;\r\n}\r\n\r\nexport const INITIALIZE = \"INITIALIZE\";\r\nexport const UPDATE_ITEMS = \"UPDATE_ITEMS\";\r\nexport const UPDATE_IS_LOADING = \"UPDATE_IS_LOADING\";\r\nexport const DELETE_DATA = \"DELETE_DATA\";\r\nexport const ERROR = \"ERROR\";\r\nexport const BlogsContext = createContext<BlogsContextType>({} as BlogsContextType);\r\n\r\nexport const BlogsReducer = (tasks: BlogsContextType, action: PortfolioReducerActionType): BlogsContextType  => {\r\n    switch (action.type) {\r\n        case UPDATE_ITEMS: {\r\n            return {\r\n                isLoading: false,    \r\n                items: action.payload?.items as BlogItems[],\r\n                error: false,\r\n                errorMessage: \"\",\r\n            };\r\n        };\r\n        case UPDATE_IS_LOADING: {\r\n            return {\r\n                ...tasks,\r\n                isLoading: action.payload?.isLoading as boolean\r\n            };\r\n        };\r\n        case INITIALIZE:\r\n        case DELETE_DATA: {\r\n            return {\r\n                isLoading: true,\r\n                items: [],\r\n                error: false,\r\n                errorMessage: \"\",\r\n            };\r\n        };\r\n        case ERROR: {\r\n            return {\r\n                ...tasks,\r\n                error: true,\r\n                errorMessage: action.payload?.errorMessage || \"An unknown error occured.\"\r\n            }\r\n        }\r\n        default: {\r\n            return {...tasks}\r\n        };\r\n    }\r\n};\r\n\r\nexport const BLOGS_INITIAL_STATE: BlogsContextType = {\r\n    isLoading: true,\r\n    items: [],\r\n    error: false,\r\n    errorMessage: \"\"\r\n};\r\n\r\n"],"names":["GET_BLOGS","READ_BLOG","useReducer","BlogsReducer","BLOGS_INITIAL_STATE","pContext","dispatch","useEffect","controller","AbortController","signal","type","INITIALIZE","fetch","BASE","method","mode","then","response","json","status","UPDATE_ITEMS","payload","items","ERROR","errorMessage","catch","finally","UPDATE_IS_LOADING","isLoading","DELETE_DATA","abort","sx","py","display","alignItems","justifyContent","fontSize","mr","variant","mt","mb","value","BlogsContext","createContext","tasks","action","error"],"sourceRoot":""}