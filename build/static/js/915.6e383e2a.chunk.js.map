{"version":3,"file":"static/js/915.6e383e2a.chunk.js","mappings":"kNAuFA,UA9D4B,WAExB,OAA6BA,EAAAA,EAAAA,YAAWC,EAAAA,GAAcC,EAAAA,IAAoB,eAAnEC,EAAQ,KAAEC,EAAQ,KAEnBC,GAAUC,EAAAA,EAAAA,MAyChB,OAtCAC,EAAAA,EAAAA,YAAU,WAEN,OADAH,EAAS,CAACI,KAAMC,EAAAA,KACT,kBAAML,EAAS,CAACI,KAAME,EAAAA,IAAc,CAC/C,GAAG,KAGHH,EAAAA,EAAAA,YAAU,WAENF,EAAQM,SACPC,MAAK,SAACD,GAAQ,OAAKA,EAASE,MAAM,IAClCD,MAAK,SAACD,GACH,GAAwB,OAApBA,EAASG,OAUT,MAAM,IARNV,EAAS,CACLI,KAAMO,EAAAA,EACNC,QAAS,CACLC,MAAON,EAASA,WAOhC,IACCO,OAAM,WAEHd,EAAS,CAAEI,KAAMW,EAAAA,GAAOH,QAAS,CAACI,aAAc,sCACpD,IACCC,SAAQ,WACLjB,EAAS,CACLI,KAAMc,EAAAA,GACNN,QAAS,CACLO,WAAW,IAGvB,GACJ,GAAG,CAAClB,KAGA,UAAC,IAAS,CAACmB,GAAI,CAACC,GAAI,GAAG,WAEnB,UAAC,IAAG,CAACC,QAAQ,OAAOC,WAAW,SAASC,eAAe,SAAQ,WAC3D,SAAC,IAAQ,CAACC,SAAS,QAAQL,GAAI,CAACM,GAAI,MACpC,SAAC,IAAU,CAACC,QAAQ,KAAI,SAAC,cAE7B,SAAC,IAAO,CAACP,GAAI,CAACQ,GAAI,EAAGC,GAAI,MAGzB,SAAC,cAAqB,CAACC,MAAO/B,EAAS,UACnC,SAAC,KAAM,QAIvB,C,uPC/DaM,EAAa,aACbM,EAAe,eACfO,EAAoB,oBACpBZ,EAAc,cACdS,EAAQ,QACRgB,GAAeC,EAAAA,EAAAA,eAAgC,CAAC,GAEhDnC,EAAe,SAACoC,EAAyBC,GAClD,OAAQA,EAAO9B,MACX,KAAKO,EAAe,IAAD,EACf,MAAO,CACHQ,WAAW,EACXN,MAAqB,QAAhB,EAAEqB,EAAOtB,eAAO,aAAd,EAAgBC,MACvBsB,OAAO,EACPnB,aAAc,IAGtB,KAAKE,EAAoB,IAAD,EACpB,OAAO,kBACAe,GAAK,IACRd,UAAyB,QAAhB,EAAEe,EAAOtB,eAAO,aAAd,EAAgBO,YAGnC,KAAKd,EACL,KAAKC,EACD,MAAO,CACHa,WAAW,EACXN,MAAO,GACPsB,OAAO,EACPnB,aAAc,IAGtB,KAAKD,EAAQ,IAAD,EACR,OAAO,kBACAkB,GAAK,IACRE,OAAO,EACPnB,cAA4B,QAAd,EAAAkB,EAAOtB,eAAO,aAAd,EAAgBI,eAAgB,8BAGtD,QACI,OAAO,UAAIiB,GAGvB,EAEanC,EAAwC,CACjDqB,WAAW,EACXN,MAAO,GACPsB,OAAO,EACPnB,aAAc,G","sources":["pages/blog/index.tsx","pages/blog/reducer.ts"],"sourcesContent":["import React, {useEffect, useReducer} from 'react';\r\nimport {Outlet, useLoaderData} from 'react-router-dom';\r\n// @mui components\r\nimport Box from '@mui/material/Box';\r\nimport Container from '@mui/material/Container';\r\nimport Typography from '@mui/material/Typography';\r\nimport Divider from '@mui/material/Divider';\r\n// @mui icons\r\nimport FeedIcon from '@mui/icons-material/Feed';\r\n// Blog types\r\nimport {GetBlogsAPIResponse} from './types';\r\n// Context\r\nimport {\r\n    BlogsContext,\r\n    BlogsReducer,\r\n    BLOGS_INITIAL_STATE,\r\n    // Action types\r\n    INITIALIZE,\r\n    UPDATE_ITEMS,\r\n    UPDATE_IS_LOADING,\r\n    DELETE_DATA,\r\n    ERROR\r\n} from './reducer';\r\n\r\n/* The Blog page */\r\nconst BlogItems: React.FC = () => {\r\n\r\n    const [pContext, dispatch] = useReducer(BlogsReducer, BLOGS_INITIAL_STATE);\r\n    // dataAPI from the loader\r\n    const dataAPI = useLoaderData() as {response: Promise<Response>};\r\n\r\n    // Clear reducer state when the component is mounted and unmounted\r\n    useEffect(() => {\r\n        dispatch({type: INITIALIZE});\r\n        return () => dispatch({type: DELETE_DATA});\r\n    }, [])\r\n\r\n    // Fetch data from API endpoint\r\n    useEffect(() => {\r\n        // Fetch\r\n        dataAPI.response\r\n        .then((response) => response.json())\r\n        .then((response: GetBlogsAPIResponse) => {\r\n            if (response.status === \"OK\") {\r\n                // Found all blogs\r\n                dispatch({\r\n                    type: UPDATE_ITEMS,\r\n                    payload: {\r\n                        items: response.response\r\n                    }\r\n                })\r\n            } else {\r\n                // An error occured while getting blogs\r\n                throw 400;\r\n            }\r\n        })\r\n        .catch(() => {\r\n            // An error occured\r\n            dispatch({ type: ERROR, payload: {errorMessage: \"Sorry, an uncaught error occured.\"}})\r\n        })\r\n        .finally(() => {\r\n            dispatch({\r\n                type: UPDATE_IS_LOADING,\r\n                payload: {\r\n                    isLoading: false\r\n                }\r\n            })\r\n        });\r\n    }, [dataAPI]);\r\n    \r\n    return (\r\n        <Container sx={{py: 2}}>\r\n            {/* Header */}\r\n            <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\r\n                <FeedIcon fontSize=\"large\" sx={{mr: 1}}/>\r\n                <Typography variant=\"h4\">Blogs</Typography>\r\n            </Box>\r\n            <Divider sx={{mt: 1, mb: 2}}/>\r\n\r\n            {/* Portfolio cards */}\r\n            <BlogsContext.Provider value={pContext}>\r\n                <Outlet/>\r\n            </BlogsContext.Provider>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default BlogItems;","import React, {createContext} from 'react';\r\nimport {BlogItems} from './types';\r\n\r\n/**\r\n * The purpose of this context is very similar to that of the portfolio/portfolioContext\r\n * A global context to store *ALL* the blogs but without their content so that their slugs\r\n * Can be used through to provide easy link access\r\n */\r\n\r\nexport interface BlogsContextType {\r\n    isLoading: boolean;\r\n    items: BlogItems[];\r\n    error: boolean;\r\n    errorMessage: string;\r\n}\r\n\r\n// This is the type of action that is to be dispatched\r\nexport interface PortfolioReducerActionType {\r\n    type: string;\r\n    payload?: Partial<BlogsContextType>;\r\n}\r\n\r\nexport const INITIALIZE = \"INITIALIZE\";\r\nexport const UPDATE_ITEMS = \"UPDATE_ITEMS\";\r\nexport const UPDATE_IS_LOADING = \"UPDATE_IS_LOADING\";\r\nexport const DELETE_DATA = \"DELETE_DATA\";\r\nexport const ERROR = \"ERROR\";\r\nexport const BlogsContext = createContext<BlogsContextType>({} as BlogsContextType);\r\n\r\nexport const BlogsReducer = (tasks: BlogsContextType, action: PortfolioReducerActionType): BlogsContextType  => {\r\n    switch (action.type) {\r\n        case UPDATE_ITEMS: {\r\n            return {\r\n                isLoading: false,    \r\n                items: action.payload?.items as BlogItems[],\r\n                error: false,\r\n                errorMessage: \"\",\r\n            };\r\n        };\r\n        case UPDATE_IS_LOADING: {\r\n            return {\r\n                ...tasks,\r\n                isLoading: action.payload?.isLoading as boolean\r\n            };\r\n        };\r\n        case INITIALIZE:\r\n        case DELETE_DATA: {\r\n            return {\r\n                isLoading: true,\r\n                items: [],\r\n                error: false,\r\n                errorMessage: \"\",\r\n            };\r\n        };\r\n        case ERROR: {\r\n            return {\r\n                ...tasks,\r\n                error: true,\r\n                errorMessage: action.payload?.errorMessage || \"An unknown error occured.\"\r\n            }\r\n        }\r\n        default: {\r\n            return {...tasks}\r\n        };\r\n    }\r\n};\r\n\r\nexport const BLOGS_INITIAL_STATE: BlogsContextType = {\r\n    isLoading: true,\r\n    items: [],\r\n    error: false,\r\n    errorMessage: \"\"\r\n};\r\n\r\n"],"names":["useReducer","BlogsReducer","BLOGS_INITIAL_STATE","pContext","dispatch","dataAPI","useLoaderData","useEffect","type","INITIALIZE","DELETE_DATA","response","then","json","status","UPDATE_ITEMS","payload","items","catch","ERROR","errorMessage","finally","UPDATE_IS_LOADING","isLoading","sx","py","display","alignItems","justifyContent","fontSize","mr","variant","mt","mb","value","BlogsContext","createContext","tasks","action","error"],"sourceRoot":""}