{"version":3,"file":"static/js/915.6e383e2a.chunk.js","mappings":"kNAuFA,UA9D4B,WAExB,IAAAA,GAA6BC,EAAAA,EAAAA,YAAWC,EAAAA,GAAcC,EAAAA,IAAoBC,GAAAC,EAAAA,EAAAA,GAAAL,EAAA,GAAnEM,EAAQF,EAAA,GAAEG,EAAQH,EAAA,GAEnBI,GAAUC,EAAAA,EAAAA,MAyChB,OAtCAC,EAAAA,EAAAA,YAAU,WAEN,OADAH,EAAS,CAACI,KAAMC,EAAAA,KACT,kBAAML,EAAS,CAACI,KAAME,EAAAA,IAAc,CAC/C,GAAG,KAGHH,EAAAA,EAAAA,YAAU,WAENF,EAAQM,SACPC,MAAK,SAACD,GAAQ,OAAKA,EAASE,MAAM,IAClCD,MAAK,SAACD,GACH,GAAwB,OAApBA,EAASG,OAUT,MAAM,IARNV,EAAS,CACLI,KAAMO,EAAAA,EACNC,QAAS,CACLC,MAAON,EAASA,WAOhC,IACCO,OAAM,WAEHd,EAAS,CAAEI,KAAMW,EAAAA,GAAOH,QAAS,CAACI,aAAc,sCACpD,IACCC,SAAQ,WACLjB,EAAS,CACLI,KAAMc,EAAAA,GACNN,QAAS,CACLO,WAAW,IAGvB,GACJ,GAAG,CAAClB,KAGAmB,EAAAA,EAAAA,MAACC,EAAAA,EAAS,CAACC,GAAI,CAACC,GAAI,GAAGC,SAAA,EAEnBJ,EAAAA,EAAAA,MAACK,EAAAA,EAAG,CAACC,QAAQ,OAAOC,WAAW,SAASC,eAAe,SAAQJ,SAAA,EAC3DK,EAAAA,EAAAA,KAACC,EAAAA,EAAQ,CAACC,SAAS,QAAQT,GAAI,CAACU,GAAI,MACpCH,EAAAA,EAAAA,KAACI,EAAAA,EAAU,CAACC,QAAQ,KAAIV,SAAC,cAE7BK,EAAAA,EAAAA,KAACM,EAAAA,EAAO,CAACb,GAAI,CAACc,GAAI,EAAGC,GAAI,MAGzBR,EAAAA,EAAAA,KAACS,EAAAA,GAAAA,SAAqB,CAACC,MAAOxC,EAASyB,UACnCK,EAAAA,EAAAA,KAACW,EAAAA,GAAM,QAIvB,C,uPC/DanC,EAAa,aACbM,EAAe,eACfO,EAAoB,oBACpBZ,EAAc,cACdS,EAAQ,QACRuB,GAAeG,EAAAA,EAAAA,eAAgC,CAAC,GAEhD9C,EAAe,SAAC+C,EAAyBC,GAClD,OAAQA,EAAOvC,MACX,KAAKO,EAAe,IAADiC,EACf,MAAO,CACHzB,WAAW,EACXN,MAAqB,QAAhB+B,EAAED,EAAO/B,eAAO,IAAAgC,OAAA,EAAdA,EAAgB/B,MACvBgC,OAAO,EACP7B,aAAc,IAGtB,KAAKE,EAAoB,IAAD4B,EACpB,OAAAC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACOL,GAAK,IACRvB,UAAyB,QAAhB2B,EAAEH,EAAO/B,eAAO,IAAAkC,OAAA,EAAdA,EAAgB3B,YAGnC,KAAKd,EACL,KAAKC,EACD,MAAO,CACHa,WAAW,EACXN,MAAO,GACPgC,OAAO,EACP7B,aAAc,IAGtB,KAAKD,EAAQ,IAADiC,EACR,OAAAD,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACOL,GAAK,IACRG,OAAO,EACP7B,cAA4B,QAAdgC,EAAAL,EAAO/B,eAAO,IAAAoC,OAAA,EAAdA,EAAgBhC,eAAgB,8BAGtD,QACI,OAAA+B,EAAAA,EAAAA,GAAA,GAAWL,GAGvB,EAEa9C,EAAwC,CACjDuB,WAAW,EACXN,MAAO,GACPgC,OAAO,EACP7B,aAAc,G","sources":["pages/blog/index.tsx","pages/blog/reducer.ts"],"sourcesContent":["import React, {useEffect, useReducer} from 'react';\nimport {Outlet, useLoaderData} from 'react-router-dom';\n// @mui components\nimport Box from '@mui/material/Box';\nimport Container from '@mui/material/Container';\nimport Typography from '@mui/material/Typography';\nimport Divider from '@mui/material/Divider';\n// @mui icons\nimport FeedIcon from '@mui/icons-material/Feed';\n// Blog types\nimport {GetBlogsAPIResponse} from './types';\n// Context\nimport {\n    BlogsContext,\n    BlogsReducer,\n    BLOGS_INITIAL_STATE,\n    // Action types\n    INITIALIZE,\n    UPDATE_ITEMS,\n    UPDATE_IS_LOADING,\n    DELETE_DATA,\n    ERROR\n} from './reducer';\n\n/* The Blog page */\nconst BlogItems: React.FC = () => {\n\n    const [pContext, dispatch] = useReducer(BlogsReducer, BLOGS_INITIAL_STATE);\n    // dataAPI from the loader\n    const dataAPI = useLoaderData() as {response: Promise<Response>};\n\n    // Clear reducer state when the component is mounted and unmounted\n    useEffect(() => {\n        dispatch({type: INITIALIZE});\n        return () => dispatch({type: DELETE_DATA});\n    }, [])\n\n    // Fetch data from API endpoint\n    useEffect(() => {\n        // Fetch\n        dataAPI.response\n        .then((response) => response.json())\n        .then((response: GetBlogsAPIResponse) => {\n            if (response.status === \"OK\") {\n                // Found all blogs\n                dispatch({\n                    type: UPDATE_ITEMS,\n                    payload: {\n                        items: response.response\n                    }\n                })\n            } else {\n                // An error occured while getting blogs\n                throw 400;\n            }\n        })\n        .catch(() => {\n            // An error occured\n            dispatch({ type: ERROR, payload: {errorMessage: \"Sorry, an uncaught error occured.\"}})\n        })\n        .finally(() => {\n            dispatch({\n                type: UPDATE_IS_LOADING,\n                payload: {\n                    isLoading: false\n                }\n            })\n        });\n    }, [dataAPI]);\n    \n    return (\n        <Container sx={{py: 2}}>\n            {/* Header */}\n            <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\n                <FeedIcon fontSize=\"large\" sx={{mr: 1}}/>\n                <Typography variant=\"h4\">Blogs</Typography>\n            </Box>\n            <Divider sx={{mt: 1, mb: 2}}/>\n\n            {/* Portfolio cards */}\n            <BlogsContext.Provider value={pContext}>\n                <Outlet/>\n            </BlogsContext.Provider>\n        </Container>\n    );\n};\n\nexport default BlogItems;","import React, {createContext} from 'react';\nimport {BlogItems} from './types';\n\n/**\n * The purpose of this context is very similar to that of the portfolio/portfolioContext\n * A global context to store *ALL* the blogs but without their content so that their slugs\n * Can be used through to provide easy link access\n */\n\nexport interface BlogsContextType {\n    isLoading: boolean;\n    items: BlogItems[];\n    error: boolean;\n    errorMessage: string;\n}\n\n// This is the type of action that is to be dispatched\nexport interface PortfolioReducerActionType {\n    type: string;\n    payload?: Partial<BlogsContextType>;\n}\n\nexport const INITIALIZE = \"INITIALIZE\";\nexport const UPDATE_ITEMS = \"UPDATE_ITEMS\";\nexport const UPDATE_IS_LOADING = \"UPDATE_IS_LOADING\";\nexport const DELETE_DATA = \"DELETE_DATA\";\nexport const ERROR = \"ERROR\";\nexport const BlogsContext = createContext<BlogsContextType>({} as BlogsContextType);\n\nexport const BlogsReducer = (tasks: BlogsContextType, action: PortfolioReducerActionType): BlogsContextType  => {\n    switch (action.type) {\n        case UPDATE_ITEMS: {\n            return {\n                isLoading: false,    \n                items: action.payload?.items as BlogItems[],\n                error: false,\n                errorMessage: \"\",\n            };\n        };\n        case UPDATE_IS_LOADING: {\n            return {\n                ...tasks,\n                isLoading: action.payload?.isLoading as boolean\n            };\n        };\n        case INITIALIZE:\n        case DELETE_DATA: {\n            return {\n                isLoading: true,\n                items: [],\n                error: false,\n                errorMessage: \"\",\n            };\n        };\n        case ERROR: {\n            return {\n                ...tasks,\n                error: true,\n                errorMessage: action.payload?.errorMessage || \"An unknown error occured.\"\n            }\n        }\n        default: {\n            return {...tasks}\n        };\n    }\n};\n\nexport const BLOGS_INITIAL_STATE: BlogsContextType = {\n    isLoading: true,\n    items: [],\n    error: false,\n    errorMessage: \"\"\n};\n\n"],"names":["_useReducer","useReducer","BlogsReducer","BLOGS_INITIAL_STATE","_useReducer2","_slicedToArray","pContext","dispatch","dataAPI","useLoaderData","useEffect","type","INITIALIZE","DELETE_DATA","response","then","json","status","UPDATE_ITEMS","payload","items","catch","ERROR","errorMessage","finally","UPDATE_IS_LOADING","isLoading","_jsxs","Container","sx","py","children","Box","display","alignItems","justifyContent","_jsx","FeedIcon","fontSize","mr","Typography","variant","Divider","mt","mb","BlogsContext","value","Outlet","createContext","tasks","action","_action$payload","error","_action$payload2","_objectSpread","_action$payload3"],"sourceRoot":""}